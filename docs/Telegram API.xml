<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telegram API</name>
    </assembly>
    <members>
        <member name="T:TelegramAPI.Available_Methods.AvailableMethods">
            <summary>Available Methods</summary>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.AnswerCallbackQuery(TelegramAPI.BotClient,TelegramAPI.Available_Methods.AnswerCallbackQueryArgs)">
            <summary>Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.AnswerCallbackQueryAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.AnswerCallbackQueryArgs)">
            <summary>Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.DeleteChatPhoto(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.DeleteChatPhotoAsync(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.DeleteChatStickerSet(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.DeleteChatStickerSetAsync(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.EditMessageLiveLocation(TelegramAPI.BotClient,TelegramAPI.Available_Methods.EditMessageLiveLocationArgs)">
            <summary>Use this method to edit live location messages sent by the bot or via the bot (for inline bots). A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.EditMessageLiveLocationAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.EditMessageLiveLocationArgs)">
            <summary>Use this method to edit live location messages sent by the bot or via the bot (for inline bots). A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.ExportChatInviteLink(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.ExportChatInviteLinkAsync(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.ForwardMessage(TelegramAPI.BotClient,System.Object,System.Object,System.UInt32)">
            <summary>Use this method to forward messages of any kind. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="from_chat_id">Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername).</param>
            <param name="message_id">Message identifier in the chat specified in from_chat_id.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.ForwardMessage(TelegramAPI.BotClient,System.Object,System.Object,System.UInt32,System.Boolean)">
            <summary>Use this method to forward messages of any kind. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="from_chat_id">Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername).</param>
            <param name="message_id">Message identifier in the chat specified in from_chat_id.</param>
            <param name="disable_notification">Sends the message silently. Users will receive a notification with no sound.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.ForwardMessageAsync(TelegramAPI.BotClient,System.Object,System.Object,System.UInt32)">
            <summary>Use this method to forward messages of any kind. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="from_chat_id">Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername).</param>
            <param name="message_id">Message identifier in the chat specified in from_chat_id.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.ForwardMessageAsync(TelegramAPI.BotClient,System.Object,System.Object,System.UInt32,System.Boolean)">
            <summary>Use this method to forward messages of any kind. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="from_chat_id">Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername).</param>
            <param name="message_id">Message identifier in the chat specified in from_chat_id.</param>
            <param name="disable_notification">Sends the message silently. Users will receive a notification with no sound.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChat(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <returns>Chat Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChat(TelegramAPI.BotClient,System.Int64)">
            <summary>Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <returns>Chat Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatAsync(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <returns>Chat Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatAsync(TelegramAPI.BotClient,System.Int64)">
            <summary>Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <returns>Chat Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatAdministrators(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <returns>Array de ChatMember Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatAdministratorsAsync(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <returns>Array de ChatMember Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatMember(TelegramAPI.BotClient,System.Object,System.Int32)">
            <summary>Use this method to get information about a member of a chat. Returns a ChatMember object on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <returns><see cref="T:TelegramAPI.Available_Types.ChatMember"/></returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatMemberAsync(TelegramAPI.BotClient,System.Object,System.Int32)">
            <summary>Use this method to get information about a member of a chat. Returns a ChatMember object on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <returns><see cref="T:TelegramAPI.Available_Types.ChatMember"/></returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatMembersCount(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to get the number of members in a chat. Returns Int on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetChatMembersCountAsync(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method to get the number of members in a chat. Returns Int on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetFile(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to get basic info about a file and prepare it for downloading.. On success, a File object is returned.</summary>
            <param name="T">BotClient</param>
            <param name="file_id">File identifier to get info about.</param>
            <returns><see cref="T:TelegramAPI.Available_Types.File"/></returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetFileAsync(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to get basic info about a file and prepare it for downloading.. On success, a File object is returned.</summary>
            <param name="T">BotClient</param>
            <param name="file_id">File identifier to get info about.</param>
            <returns><see cref="T:TelegramAPI.Available_Types.File"/></returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetMe(TelegramAPI.BotClient)">
            <summary>A simple method for testing your bot's auth token. Returns basic information about the bot in form of a User object.</summary>
            <returns>User Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetMeAsync(TelegramAPI.BotClient)">
            <summary>A simple method for testing your bot's auth token. Returns basic information about the bot in form of a User object.</summary>
            <returns>User Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetUserProfilePhotos(TelegramAPI.BotClient,System.Int32,System.UInt32,System.UInt16)">
            <summary>Use this method to get a list of profile pictures for a user.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="offset">Sequential number of the first photo to be returned. By default, all photos are returned.</param>
            <param name="limit">Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.</param>
            <returns>UserProfilePhotos Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.GetUserProfilePhotosAsync(TelegramAPI.BotClient,System.Int32,System.UInt32,System.UInt16)">
            <summary>Use this method to get a list of profile pictures for a user.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="offset">Sequential number of the first photo to be returned. By default, all photos are returned.</param>
            <param name="limit">Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.</param>
            <returns>UserProfilePhotos Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.KickChatMember(TelegramAPI.BotClient,System.Object,System.Int32,System.Int32)">
            <summary>Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            /// <param name="until_date">Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.KickChatMemberAsync(TelegramAPI.BotClient,System.Object,System.Int32,System.Int32)">
            <summary>Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            /// <param name="until_date">Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.LeaveChat(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method for your bot to leave a group, supergroup or channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.LeaveChatAsync(TelegramAPI.BotClient,System.Object)">
            <summary>Use this method for your bot to leave a group, supergroup or channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.PinChatMessage(TelegramAPI.BotClient,System.Object,System.UInt32,System.Boolean)">
            <summary>Use this method to pin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="message_id">Identifier of a message to pin.</param>
            <param name="disable_notification">Optional. Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.PinChatMessageAsync(TelegramAPI.BotClient,System.Object,System.UInt32,System.Boolean)">
            <summary>Use this method to pin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="message_id">Identifier of a message to pin.</param>
            <param name="disable_notification">Optional. Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.PromoteChatMember(TelegramAPI.BotClient,TelegramAPI.Available_Methods.PromoteChatMemberArgs)">
            <summary>Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.PromoteChatMemberAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.PromoteChatMemberArgs)">
            <summary>Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.RestrictChatMember(TelegramAPI.BotClient,System.Object,System.Int32,TelegramAPI.Available_Types.ChatPermissions,System.UInt32)">
            <summary>Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all boolean parameters to lift restrictions from a user. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="permissions">New user permissions.</param>
            <param name="until_date">Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.RestrictChatMemberAsync(TelegramAPI.BotClient,System.Object,System.Int32,TelegramAPI.Available_Types.ChatPermissions,System.UInt32)">
            <summary>Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all boolean parameters to lift restrictions from a user. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="permissions">New user permissions.</param>
            <param name="until_date">Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendAnimation(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendAnimationArgs)">
            <summary>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendAnimationAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendAnimationArgs)">
            <summary>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendAudio(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendAudioArgs)">
            <summary>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendAudioAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendAudioArgs)">
            <summary>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendChatAction(TelegramAPI.BotClient,System.Object,System.String)">
            <summary>Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="action">Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_audio or upload_audio for audio files, upload_document for general files, find_location for location data, record_video_note or upload_video_note for video notes.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendChatActionAsync(TelegramAPI.BotClient,System.Object,System.String)">
            <summary>Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="action">Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_audio or upload_audio for audio files, upload_document for general files, find_location for location data, record_video_note or upload_video_note for video notes.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendContact(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendContactArgs)">
            <summary>Use this method to send phone contacts. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendContactAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendContactArgs)">
            <summary>Use this method to send phone contacts. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendDocument(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendDocumentArgs)">
            <summary>Use this method to send general files. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendDocumentAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendDocumentArgs)">
            <summary>Use this method to send general files. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendLocation(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendLocationArgs)">
            <summary>Use this method to send point on the map. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendLocationAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendLocationArgs)">
            <summary>Use this method to send point on the map. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMediaGroup(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendMediaGroupArgs)">
            <summary>Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message array.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMediaGroupAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendMediaGroupArgs)">
            <summary>Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message array.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessage(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendMessageArgs)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessageAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendMessageArgs)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessage(TelegramAPI.BotClient,System.Object,System.String,System.String,System.Boolean,System.Boolean,System.UInt32,TelegramAPI.Available_Types.ReplyMarkup)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="text">Text of the message to be sent.</param>
            <param name="parse_mode">Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <param name="disable_web_page_preview">Disables link previews for links in this message</param>
            <param name="disable_notification">Sends the message silently. Users will receive a notification with no sound.</param>
            <param name="reply_to_message_id">If the message is a reply, ID of the original message</param>
            <param name="reply_markup">Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessageAsync(TelegramAPI.BotClient,System.Object,System.String,System.String,System.Boolean,System.Boolean,System.UInt32,TelegramAPI.Available_Types.ReplyMarkup)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="text">Text of the message to be sent.</param>
            <param name="parse_mode">Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <param name="disable_web_page_preview">Disables link previews for links in this message</param>
            <param name="disable_notification">Sends the message silently. Users will receive a notification with no sound.</param>
            <param name="reply_to_message_id">If the message is a reply, ID of the original message</param>
            <param name="reply_markup">Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessage(TelegramAPI.BotClient,System.Object,System.String)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="text">Text of the message to be sent.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessageAsync(TelegramAPI.BotClient,System.Object,System.String)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="text">Text of the message to be sent.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessage(TelegramAPI.BotClient,System.Object,System.String,System.UInt32)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="text">Text of the message to be sent.</param>
            <param name="reply_to_message_id">If the message is a reply, ID of the original message.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendMessageAsync(TelegramAPI.BotClient,System.Object,System.String,System.UInt32)">
            <summary>Use this method to send text messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="text">Text of the message to be sent.</param>
            <param name="reply_to_message_id">If the message is a reply, ID of the original message.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendPhoto(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendPhotoArgs)">
            <summary>Use this method to send photos. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendPhotoAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendPhotoArgs)">
            <summary>Use this method to send photos. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendPoll(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendPollArgs)">
            <summary>Use this method to send a native poll. A native poll can't be sent to a private chat. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendPollAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendPollArgs)">
            <summary>Use this method to send a native poll. A native poll can't be sent to a private chat. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVenue(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVenueArgs)">
            <summary>Use this method to send information about a venue. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVenueAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVenueArgs)">
            <summary>Use this method to send information about a venue. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVideo(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVideoArgs)">
            <summary>Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVideoAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVideoArgs)">
            <summary>Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVideoNote(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVideoNoteArgs)">
            <summary>As of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVideoNoteAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVideoNoteArgs)">
            <summary>As of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVoice(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVoiceArgs)">
            <summary>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SendVoiceAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SendVoiceArgs)">
            <summary>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatAdministratorCustomTitle(TelegramAPI.BotClient,System.Int64,System.Int32,System.String)">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.</summary>
            <param name="T">Bot Client</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="custom_title">New custom title for the administrator; 0-16 characters, emoji are not allowed.</param>
            <returns>True</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatAdministratorCustomTitle(TelegramAPI.BotClient,System.String,System.Int32,System.String)">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.</summary>
            <param name="T">Bot Client</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="custom_title">New custom title for the administrator; 0-16 characters, emoji are not allowed.</param>
            <returns>True</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatAdministratorCustomTitleAsync(TelegramAPI.BotClient,System.Int64,System.Int32,System.String)">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.</summary>
            <param name="T">Bot Client</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="custom_title">New custom title for the administrator; 0-16 characters, emoji are not allowed.</param>
            <returns>True</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatAdministratorCustomTitleAsync(TelegramAPI.BotClient,System.String,System.Int32,System.String)">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.</summary>
            <param name="T">Bot Client</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="user_id">Unique identifier of the target user.</param>
            <param name="custom_title">New custom title for the administrator; 0-16 characters, emoji are not allowed.</param>
            <returns>True</returns>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatDescription(TelegramAPI.BotClient,System.Int64,System.String)">
            <summary>Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="description">New chat description, 0-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatDescription(TelegramAPI.BotClient,System.String,System.String)">
            <summary>Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="description">New chat description, 0-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatDescriptionAsync(TelegramAPI.BotClient,System.Int64,System.String)">
            <summary>Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="description">New chat description, 0-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatDescriptionAsync(TelegramAPI.BotClient,System.String,System.String)">
            <summary>Use this method to change the description of a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="description">New chat description, 0-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPermissions(TelegramAPI.BotClient,System.Int64,TelegramAPI.Available_Types.ChatPermissions)">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="permissions">New default chat permissions.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPermissions(TelegramAPI.BotClient,System.String,TelegramAPI.Available_Types.ChatPermissions)">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="permissions">New default chat permissions.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPermissionsAsync(TelegramAPI.BotClient,System.Int64,TelegramAPI.Available_Types.ChatPermissions)">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="permissions">New default chat permissions.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPermissionsAsync(TelegramAPI.BotClient,System.String,TelegramAPI.Available_Types.ChatPermissions)">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="permissions">New default chat permissions.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPhoto(TelegramAPI.BotClient,System.Int64,TelegramAPI.Available_Types.InputFile)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="photo">New chat photo, uploaded using multipart/form-data.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPhoto(TelegramAPI.BotClient,System.String,TelegramAPI.Available_Types.InputFile)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="photo">New chat photo, uploaded using multipart/form-data.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPhoto(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SetChatPhotoArgs)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPhotoAsync(TelegramAPI.BotClient,System.Int64,TelegramAPI.Available_Types.InputFile)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="photo">New chat photo, uploaded using multipart/form-data.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPhotoAsync(TelegramAPI.BotClient,System.String,TelegramAPI.Available_Types.InputFile)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="photo">New chat photo, uploaded using multipart/form-data.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatPhotoAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.SetChatPhotoArgs)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatStickerSet(TelegramAPI.BotClient,System.Int64,System.String)">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="sticker_set_name">Name of the sticker set to be set as the group sticker set.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatStickerSet(TelegramAPI.BotClient,System.String,System.String)">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="sticker_set_name">Name of the sticker set to be set as the group sticker set.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatStickerSetAsync(TelegramAPI.BotClient,System.Int64,System.String)">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="sticker_set_name">Name of the sticker set to be set as the group sticker set.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatStickerSetAsync(TelegramAPI.BotClient,System.String,System.String)">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="sticker_set_name">Name of the sticker set to be set as the group sticker set.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatTitle(TelegramAPI.BotClient,System.Int64,System.String)">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="title">New chat title, 1-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatTitle(TelegramAPI.BotClient,System.String,System.String)">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="title">New chat title, 1-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatTitleAsync(TelegramAPI.BotClient,System.Int64,System.String)">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="title">New chat title, 1-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.SetChatTitleAsync(TelegramAPI.BotClient,System.String,System.String)">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
            <param name="title">New chat title, 1-255 characters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.StopMessageLiveLocation(TelegramAPI.BotClient,TelegramAPI.Available_Methods.StopMessageLiveLocationArgs)">
            <summary>Use this method to stop updating a live location message sent by the bot or via the bot (for inline bots) before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.StopMessageLiveLocationAsync(TelegramAPI.BotClient,TelegramAPI.Available_Methods.StopMessageLiveLocationArgs)">
            <summary>Use this method to stop updating a live location message sent by the bot or via the bot (for inline bots) before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnbanChatMember(TelegramAPI.BotClient,System.Int64,System.Int32)">
            <summary>Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target group or username of the target supergroup or channel (in the format @username).</param>
            <param name="user_id">Unique identifier of the target user.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnbanChatMember(TelegramAPI.BotClient,System.String,System.Int32)">
            <summary>Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target group or username of the target supergroup or channel (in the format @username).</param>
            <param name="user_id">Unique identifier of the target user.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnbanChatMemberAsync(TelegramAPI.BotClient,System.Int64,System.Int32)">
            <summary>Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target group or username of the target supergroup or channel (in the format @username).</param>
            <param name="user_id">Unique identifier of the target user.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnbanChatMemberAsync(TelegramAPI.BotClient,System.String,System.Int32)">
            <summary>Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target group or username of the target supergroup or channel (in the format @username).</param>
            <param name="user_id">Unique identifier of the target user.</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnPinChatMessage(TelegramAPI.BotClient,System.Int64)">
            <summary>Use this method to unpin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnPinChatMessage(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to unpin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnPinChatMessageAsync(TelegramAPI.BotClient,System.Int64)">
            <summary>Use this method to unpin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="M:TelegramAPI.Available_Methods.AvailableMethods.UnPinChatMessageAsync(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to unpin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</param>
        </member>
        <member name="T:TelegramAPI.Available_Methods.AnswerCallbackQueryArgs">
            <summary>AnswerCallbackQuery method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.AnswerCallbackQueryArgs.Callback_query_id">
            <summary>Unique identifier for the query to be answered.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.AnswerCallbackQueryArgs.Text">
            <summary>Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.AnswerCallbackQueryArgs.Show_alert">
            <summary>Optional. If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.AnswerCallbackQueryArgs.Url">
            <summary>Optional. URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game – note that this will only work if the query comes from a callback_game button. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.AnswerCallbackQueryArgs.Cache_time">
            <summary>Optional. The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.BaseSendArgs">
            <summary>Base object for message-sending methods arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.BaseSendArgs.Chat_id">
            <summary>Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.BaseSendArgs.Disable_notification">
            <summary>Optional. Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.BaseSendArgs.Reply_to_message_id">
            <summary>Optional. If the message is a reply, ID of the original message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.BaseSendArgs.Reply_markup">
            <summary>Optional. Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user. <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> or <see cref="T:TelegramAPI.Available_Types.ReplyKeyboardMarkup"/> or <see cref="T:TelegramAPI.Available_Types.ReplyKeyboardRemove"/> or <see cref="T:TelegramAPI.Available_Types.ForceReply"/></summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs">
            <summary>EditMessageLiveLocation method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the sent message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs.Latitude">
            <summary>Latitude of new location.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs.Longitude">
            <summary>Longitude of new location.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.EditMessageLiveLocationArgs.Reply_markup">
            <summary>Optional. A JSON object for a new inline keyboard.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.PromoteChatMemberArgs">
            <summary>PromoteChatMember method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Chat_id">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.User_id">
            <summary>Unique identifier of the target user.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_change_info">
            <summary>Optional. Pass True, if the administrator can change chat title, photo and other settings.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_post_messages">
            <summary>Optional. Pass True, if the administrator can create channel posts, channels only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_edit_messages">
            <summary>Optional. Pass True, if the administrator can edit messages of other users and can pin messages, channels only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_delete_messages">
            <summary>Optional. Pass True, if the administrator can delete messages of other users.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_invite_users">
            <summary>Optional. Pass True, if the administrator can invite new users to the chat..</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_restrict_members">
            <summary>Optional. Pass True, if the administrator can restrict, ban or unban chat members.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_pin_messages">
            <summary>Optional. Pass True, if the administrator can pin messages, supergroups only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.PromoteChatMemberArgs.Can_promote_members">
            <summary>Optional. Pass True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him).</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendAnimationArgs">
            <summary>SendAnimation method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Animation">
            <summary>Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Duration">
            <summary>Optional. Duration of sent animation in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Width">
            <summary>Optional. Animation width.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Height">
            <summary>Optional. Animation height.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Thumb">
            <summary>Optional. InputFile or String. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt; <a href="https://core.telegram.org/bots/api#sending-files">More Info in Sending Files</a></summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Caption">
            <summary>Optional. Animation caption (may also be used when resending animation by file_id), 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAnimationArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendAudioArgs">
            <summary>SendAudio method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Audio">
            <summary>Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Caption">
            <summary>Audio caption, 0-1024 characters</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Duration">
            <summary>Optional. Duration of the audio in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Performer">
            <summary>Optional. Performer.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Title">
            <summary>Optional. Track name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.Thumb">
            <summary>Optional. InputFile or String. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendAudioArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendContactArgs">
            <summary>SendContact method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendContactArgs.Phone_number">
            <summary>Contact's phone number.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendContactArgs.First_name">
            <summary>Contact's first name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendContactArgs.Last_name">
            <summary>Optional. Contact's last name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendContactArgs.Vcard">
            <summary>Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendDocumentArgs">
            <summary>SendDocument method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendDocumentArgs.Document">
            <summary>File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendDocumentArgs.Thumb">
            <summary>Optional. InputFile or String. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendDocumentArgs.Caption">
            <summary>Document caption (may also be used when resending documents by file_id), 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendDocumentArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendDocumentArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendLocationArgs">
            <summary>SendLocation method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendLocationArgs.Latitude">
            <summary>Latitude of the location.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendLocationArgs.Longitude">
            <summary>Longitude of the location.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendLocationArgs.Live_period">
            <summary>Optional. Period in seconds for which the location will be updated, should be between 60 and 86400.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendMediaGroupArgs">
            <summary>SendMediaGroud method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMediaGroupArgs.Chat_id">
            <summary>Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMediaGroupArgs.Media">
            <summary>A JSON array of <see cref="T:TelegramAPI.Available_Types.InputMedia"/> and <see cref="T:TelegramAPI.Available_Types.InputMedia"/>, describing photos and videos to be sent, must include 2–10 items.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMediaGroupArgs.Disable_notification">
            <summary>Optional. Sends the message silently. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMediaGroupArgs.Reply_to_message_id">
            <summary>Optional. If the message is a reply, ID of the original message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMediaGroupArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendMessageArgs">
            <summary>SendMessage method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMessageArgs.Text">
            <summary>Text of the message to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMessageArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendMessageArgs.Disable_web_page_preview">
            <summary>Optional. Disables link previews for links in this message.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendPhotoArgs">
            <summary>SendPhoto method arguments</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendPhotoArgs.Photo">
            <summary>InputFile or String. Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendPhotoArgs.Caption">
            <summary>Optional. Photo caption (may also be used when resending photos by file_id), 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendPhotoArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendPhotoArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendPollArgs">
            <summary>SendPoll method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendPollArgs.Question">
            <summary>Poll question, 1-255 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendPollArgs.Options">
            <summary>List of answer options, 2-10 strings 1-100 characters each.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendVenueArgs">
            <summary>Send Venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVenueArgs.Latitude">
            <summary>Latitude of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVenueArgs.Longitude">
            <summary>Longitude of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVenueArgs.Title">
            <summary>Name of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVenueArgs.Address">
            <summary>Address of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVenueArgs.Foursquare_id">
            <summary>Optional. Foursquare identifier of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVenueArgs.Foursquare_type">
            <summary>Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”).</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendVideoArgs">
            <summary>SendVideo method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Video">
            <summary>Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Duration">
            <summary>Optional. Duration of sent video in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Width">
            <summary>Optional. Video width.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Height">
            <summary>Optional. Video height.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Thumb">
            <summary>Optional. InputFile or String. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Caption">
            <summary>Optional. Video caption (may also be used when resending videos by file_id), 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.Supports_streaming">
            <summary>Optional. Pass True, if the uploaded video is suitable for streaming.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendVideoNoteArgs">
            <summary>SendVideoNote method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoNoteArgs.Video_note">
            <summary>Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoNoteArgs.Duration">
            <summary>Optional. Duration of sent video in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoNoteArgs.Length">
            <summary>Optional. Video width and height, i.e. diameter of the video message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoNoteArgs.Thumb">
            <summary>Optional. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVideoNoteArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SendVoiceArgs">
            <summary>SendVoice method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVoiceArgs.Voice">
            <summary>Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVoiceArgs.Caption">
            <summary>Voice message caption, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVoiceArgs.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVoiceArgs.Duration">
            <summary>Optional. Duration of the voice message in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SendVoiceArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.SetChatPhotoArgs">
            <summary>SetChatPhoto method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SetChatPhotoArgs.Chat_id">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.SetChatPhotoArgs.Photo">
            <summary>New chat photo, uploaded using multipart/form-data.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Methods.StopMessageLiveLocationArgs">
            <summary>StopMessageLiveLocation method arguments</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.StopMessageLiveLocationArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.StopMessageLiveLocationArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the sent message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.StopMessageLiveLocationArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Methods.StopMessageLiveLocationArgs.Reply_markup">
            <summary>Optional. A JSON object for a new inline keyboard.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Animation">
            <summary>This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.Width">
            <summary>Video width as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.Height">
            <summary>Video height as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.Duration">
            <summary>Duration of the video in seconds as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.Thumb">
            <summary>Optional. Animation thumbnail as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.File_name">
            <summary>Optional. Original animation filename as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.Mime_type">
            <summary>Optional. MIME type of the file as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Animation.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Audio">
            <summary>This object represents an audio file to be treated as music by the Telegram clients.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.Performer">
            <summary>Optional. Performer of the audio as defined by sender or by audio tags.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.Title">
            <summary>Optional. Title of the audio as defined by sender or by audio tags.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.Mime_type">
            <summary>Optional. MIME type of the file as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Audio.Thumb">
            <summary>Optional. Thumbnail of the album cover to which the music file belongs.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.CallbackQuery">
            <summary>This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.Id">
            <summary>Unique identifier for this query.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.From">
            <summary>Sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.Message">
            <summary>Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.Inline_message_id">
            <summary>Optional. Identifier of the message sent via the bot in inline mode, that originated the query.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.Chat_instance">
            <summary>Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.Data">
            <summary>Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.CallbackQuery.Game_short_name">
            <summary>Optional. Short name of a Game to be returned, serves as the unique identifier for the game.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Chat">
            <summary>This object represents a chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Id">
            <summary>Unique identifier for this chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Type">
            <summary>Type of chat, can be either “private”, “group”, “supergroup” or “channel”.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Title">
            <summary>Optional. Title, for supergroups, channels and group chats.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Username">
            <summary>Optional. Username, for private chats, supergroups and channels if available.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.First_name">
            <summary>Optional. First name of the other party in a private chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Last_name">
            <summary>Optional. Last name of the other party in a private chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Photo">
            <summary>Optional. Chat photo. Returned only in getChat..</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Description">
            <summary>Optional. Description, for supergroups and channel chats. Returned only in getChat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Invite_link">
            <summary>Optional. Chat invite link, for supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using exportChatInviteLink. Returned only in getChat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Pinned_message">
            <summary>Optional. Pinned message, for supergroups and channel chats. Returned only in getChat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Permissions">
            <summary>Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Slow_mode_delay">
            <summary>Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in getChat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Sticker_set_name">
            <summary>Optional. For supergroups, name of group sticker set. Returned only in getChat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Chat.Can_set_sticker_set">
            <summary>Optional. True, if the bot can change the group sticker set. Returned only in getChat.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ChatMember">
            <summary>This object contains information about one member of a chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.User">
            <summary>Information about the user.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Status">
            <summary>The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Custom_title">
            <summary>Optional. Owner and administrators only. Custom title for this user.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Until_date">
            <summary>Optional. Restricted and kicked only. Date when restrictions will be lifted for this user, unix time.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_be_edited">
            <summary>Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_post_messages">
            <summary>Optional. Administrators only. True, if the administrator can post in the channel, channels only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_edit_messages">
            <summary>Optional. Administrators only. True, if the administrator can edit messages of other users and can pin messages, channels only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_delete_messages">
            <summary>Optional. Administrators only. True, if the administrator can delete messages of other users.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_restrict_members">
            <summary>Optional. Administrators only. True, if the administrator can restrict, ban or unban chat members.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_promote_members">
            <summary>Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_change_info">
            <summary>Optional. Administrators only. True, if the administrator can change the chat title, photo and other settings.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_invite_users">
            <summary>Optional. Administrators only. True, if the administrator can invite new users to the chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_pin_messages">
            <summary>Optional. Administrators only. True, if the administrator can pin messages, supergroups only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Is_member">
            <summary>Optional. Restricted only. True, if the user is a member of the chat at the moment of the request.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_send_messages">
            <summary>Optional. Restricted only. True, if the user can send text messages, contacts, locations and venues.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_send_media_messages">
            <summary>Optional. Restricted only. True, if the user can send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_send_polls">
            <summary>Optional. Restricted only. True, if the user is allowed to send polls.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_send_other_messages">
            <summary>Optional. Restricted only. True, if the user can send animations, games, stickers and use inline bots, implies can_send_media_messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatMember.Can_add_web_page_previews">
            <summary>Optional. Restricted only. True, if user may add web page previews to his messages, implies can_send_media_messages.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ChatPermissions">
            <summary>Describes actions that a non-administrator user is allowed to take in a chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_send_messages">
            <summary>Optional. True, if the user is allowed to send text messages, contacts, locations and venues.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_send_media_messages">
            <summary>Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_send_polls">
            <summary>Optional. True, if the user is allowed to send polls, implies can_send_messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_send_other_messages">
            <summary>Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_add_web_page_previews">
            <summary>Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_change_info">
            <summary>Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_invite_users">
            <summary>Optional. True, if the user is allowed to invite new users to the chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPermissions.Can_pin_messages">
            <summary>Optional. True, if the user is allowed to pin messages. Ignored in public supergroups.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ChatPhoto">
            <summary>This object represents a chat photo.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPhoto.Small_file_id">
            <summary>File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPhoto.Small_file_unique_id">
            <summary>Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPhoto.Big_file_id">
            <summary>File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ChatPhoto.Big_file_unique_id">
            <summary>Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Contact">
            <summary>This object represents a phone contact..</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Contact.Phone_number">
            <summary>Contact's phone number.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Contact.First_name">
            <summary>Contact's first name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Contact.Last_name">
            <summary>Optional. Contact's last name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Contact.User_id">
            <summary>Optional. Contact's user identifier in Telegram.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Contact.Vcard">
            <summary>Optional. Additional data about the contact in the form of a vCard.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Document">
            <summary>This object represents a general file (as opposed to photos, voice messages and audio files).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Document.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Document.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Document.Thumb">
            <summary>Optional. Document thumbnail as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Document.File_name">
            <summary>Optional. Original filename as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Document.Mime_type">
            <summary>Optional. MIME type of the file as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Document.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.File">
            <summary>This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt;. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.File.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.File.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.File.File_size">
            <summary>Optional. File size, if known.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.File.File_path">
            <summary>Optional. File path. Use https://api.telegram.org/file/bot&lt;token&gt;/&lt;file_path&gt; to get the file.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ForceReply">
            <summary>Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot‘s message and tapped ’Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ForceReply.Force_reply">
            <summary>Shows reply interface to the user, as if they manually selected the bot‘s message and tapped ’Reply'.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ForceReply.Selective">
            <summary>Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InlineKeyboardButton">
            <summary>This object represents one button of an inline keyboard. You must use exactly one of the optional fields.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Text">
            <summary>Label text on the button.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Url">
            <summary>Optional. HTTP or tg:// url to be opened when button is pressed.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Login_url">
            <summary>Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Callback_data">
            <summary>Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Switch_inline_query">
            <summary>Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field. Can be empty, in which case just the bot’s username will be inserted.<para>Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.</para></summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Switch_inline_query_current_chat">
            <summary>Optional. If set, pressing the button will insert the bot‘s username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot’s username will be inserted.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Callback_game">
            <summary>Optional. Description of the game that will be launched when the user presses the button.<para>NOTE: This type of button must always be the first button in the first row.</para></summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardButton.Pay">
            <summary>Optional. Specify True, to send a Pay button.<para>NOTE: This type of button must always be the first button in the first row.</para></summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InlineKeyboardMarkup">
            <summary>This object represents an inline keyboard that appears right next to the message it belongs to.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InlineKeyboardMarkup.Inline_keyboard">
            <summary>Array of button rows, each represented by an Array of <see cref="T:TelegramAPI.Available_Types.InlineKeyboardButton"/> objects.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputFile">
            <summary>This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputFile.Content">
            <summary>HTTP file content.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputFile.Filename">
            <summary>File name.</summary>
        </member>
        <member name="M:TelegramAPI.Available_Types.InputFile.#ctor(System.Net.Http.StreamContent,System.String)">
            <summary>New InputFile.</summary>
            <param name="streamcontent">HTTP file content.</param>
            <param name="filename">File name.</param>
        </member>
        <member name="M:TelegramAPI.Available_Types.InputFile.#ctor(System.IO.MemoryStream,System.String)">
            <summary>New InputFile.</summary>
            <param name="streamfile">Stream file.</param>
            <param name="filename">File name.</param>
        </member>
        <member name="M:TelegramAPI.Available_Types.InputFile.#ctor(System.Byte[],System.String)">
            <summary>New InputFile.</summary>
            <param name="file">File.</param>
            <param name="filename">File name.</param>
        </member>
        <member name="T:TelegramAPI.Available_Types.AttachFile">
            <summary>This object represents a attachfile.</summary>
        </member>
        <member name="M:TelegramAPI.Available_Types.AttachFile.#ctor(System.String,TelegramAPI.Available_Types.InputFile)">
            <summary>New AttachFile</summary>
            <param name="name">File attach name.</param>
            <param name="inputFile">This object represents the contents of a file to be uploaded.</param>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputMedia">
            <summary>This object represents the content of a media message to be sent. It should be one of: <br /><br />
            • <see cref="T:TelegramAPI.Available_Types.InputMediaAnimation"/><br />
            • <see cref="T:TelegramAPI.Available_Types.InputMediaDocument"/><br />
            • <see cref="T:TelegramAPI.Available_Types.InputMediaAudio"/><br />
            • <see cref="T:TelegramAPI.Available_Types.InputMediaPhoto"/><br />
            • <see cref="T:TelegramAPI.Available_Types.InputMediaVideo"/></summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMedia.Type">
            <summary>Type of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMedia.Media">
            <summary>File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://&lt;file_attach_name&gt;” to upload a new one using multipart/form-data under &lt;file_attach_name&gt; name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMedia.Caption">
            <summary>Optional. Caption of the file to be sent, 0-1024 characters.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputMediaAnimation">
            <summary>Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Type">
            <summary>Type of the result, must be animation.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Thumb">
            <summary>Optional. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Caption">
            <summary>Optional. Caption of the animation to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Width">
            <summary>Optional. Animation width.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Height">
            <summary>Optional. Animation height.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAnimation.Duration">
            <summary>Optional. Animation duration.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputMediaAudio">
            <summary>Represents an audio file to be treated as music to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Type">
            <summary>Type of the result, must be audio.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Thumb">
            <summary>Optional. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Caption">
            <summary>Optional. Caption of the audio to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Duration">
            <summary>Optional. Duration of the audio in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Performer">
            <summary>Optional. Performer of the audio.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaAudio.Title">
            <summary>Optional. Title of the audio.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputMediaDocument">
            <summary>Represents a general file to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaDocument.Type">
            <summary>Type of the result, must be document.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaDocument.Thumb">
            <summary>Optional. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaDocument.Caption">
            <summary>Optional. Caption of the document to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaDocument.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputMediaPhoto">
            <summary>Represents a photo to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaPhoto.Type">
            <summary>Type of the result, must be photo.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaPhoto.Caption">
            <summary>Optional. Caption of the photo to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaPhoto.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.InputMediaVideo">
            <summary>Represents a video to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Type">
            <summary>Type of the result, must be video.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Thumb">
            <summary>Optional. Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 90. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://&lt;file_attach_name&gt;” if the thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Caption">
            <summary>Optional. Caption of the video to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Width">
            <summary>Optional. Video width.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Height">
            <summary>Optional. Video height.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Duration">
            <summary>Optional. Video duration.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.InputMediaVideo.Supports_streaming">
            <summary>Optional. Pass True, if the uploaded video is suitable for streaming.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.KeyboardButton">
            <summary>This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields are mutually exclusive.</summary>
        </member>
        <member name="M:TelegramAPI.Available_Types.KeyboardButton.#ctor(System.String)">
            <summary>Creates a new keyboard button.</summary>
            <param name="text">Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed.</param>
        </member>
        <member name="P:TelegramAPI.Available_Types.KeyboardButton.Text">
            <summary>Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.KeyboardButton.Request_contact">
            <summary>Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.KeyboardButton.Request_location">
            <summary>Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Location">
            <summary>This object represents a point on the map.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Location.Longitude">
            <summary>Longitude as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Location.Latitude">
            <summary>Latitude as defined by sender.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.LoginUrl">
            <summary>This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.LoginUrl.Url">
            <summary>An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.<para>NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.</para></summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.LoginUrl.Forward_text">
            <summary>Optional. New text of the button in forwarded messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.LoginUrl.Bot_username">
            <summary>Optional. Username of a bot, which will be used for user authorization. See <a href="https://core.telegram.org/widgets/login#setting-up-a-bot">Setting up a bot</a> for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See <a href="https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot">Linking your domain</a> to the bot for more details.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.LoginUrl.Request_write_access">
            <summary>Optional. Pass True to request the permission for your bot to send messages to the user.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Message">
            <summary>This object represents a message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Message_id">
            <summary>Unique message identifier inside this chat.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.From">
            <summary>Optional. Sender, empty for messages sent to channels.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Date">
            <summary>Date the message was sent in Unix time.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Chat">
            <summary>Conversation the message belongs to.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Forward_from">
            <summary>Optional. For forwarded messages, sender of the original message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Forward_from_chat">
            <summary>Optional. For messages forwarded from channels, information about the original channel.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Forward_from_message_id">
            <summary>Optional. For messages forwarded from channels, identifier of the original message in the channel.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Forward_signature">
            <summary>Optional. For messages forwarded from channels, signature of the post author if present.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Forward_sender_name">
            <summary>Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Forward_date">
            <summary>Optional. For forwarded messages, date the original message was sent in Unix time.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Reply_to_message">
            <summary>Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Edit_date">
            <summary>Optional. Date the message was last edited in Unix time.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Media_group_id">
            <summary>Optional. The unique identifier of a media message group this message belongs to.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Author_signature">
            <summary>Optional. Signature of the post author for messages in channels.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Text">
            <summary>Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Entities">
            <summary>Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Caption_entities">
            <summary>Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Audio">
            <summary>Optional. Message is an audio file, information about the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Document">
            <summary>Optional. Message is a general file, information about the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Animation">
            <summary>Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Game">
            <summary>Optional. Message is a game, information about the game.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Photo">
            <summary>Optional. Message is a photo, available sizes of the photo.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Sticker">
            <summary>Optional. Message is a sticker, information about the sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Video">
            <summary>Optional. Message is a video, information about the video.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Voice">
            <summary>Optional. Message is a voice message, information about the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Video_note">
            <summary>Optional. Message is a video note, information about the video message.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Caption">
            <summary>Optional. Caption for the audio, document, photo, video or voice, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Contact">
            <summary>Optional. Message is a shared contact, information about the contact.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Location">
            <summary>Optional. Message is a shared location, information about the location.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Venue">
            <summary>Optional. Message is a venue, information about the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Poll">
            <summary>Optional. Message is a native poll, information about the poll.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.New_chat_members">
            <summary>Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Left_chat_member">
            <summary>Optional. A member was removed from the group, information about them (this member may be the bot itself).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.New_chat_title">
            <summary>Optional. A chat title was changed to this value.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.New_chat_photo">
            <summary>Optional. A chat photo was change to this value.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Delete_chat_photo">
            <summary>Optional. Service message: the chat photo was deleted.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Group_chat_created">
            <summary>Optional. Service message: the group has been created.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Supergroup_chat_created">
            <summary>Optional. Service message: the supergroup has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Channel_chat_created">
            <summary>Optional. Service message: the channel has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Migrate_to_chat_id">
            <summary>Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Migrate_from_chat_id">
            <summary>Optional. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Pinned_message">
            <summary>Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Invoice">
            <summary>Optional. Message is an invoice for a payment, information about the invoice.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Successful_payment">
            <summary>Optional. Message is a service message about a successful payment, information about the payment.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Connected_website">
            <summary>Optional. The domain name of the website on which the user has logged in.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Passport_data">
            <summary>Optional. Telegram Passport data.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Message.Reply_markup">
            <summary>Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.MessageEntity">
            <summary>This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.MessageEntity.Type">
            <summary>Type of the entity. Can be “mention” (@username), “hashtag” (#hashtag), “cashtag” ($USD), “bot_command” (/start@jobs_bot), “url” (https://telegram.org), “email” (do-not-reply@telegram.org), “phone_number” (+1-212-555-0123), “bold” (bold text), “italic” (italic text), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.MessageEntity.Offset">
            <summary>Offset in UTF-16 code units to the start of the entity.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.MessageEntity.Length">
            <summary>Length of the entity in UTF-16 code units.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.MessageEntity.Url">
            <summary>Optional. For “text_link” only, url that will be opened after user taps on the text.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.MessageEntity.User">
            <summary>Optional. For “text_mention” only, the mentioned user.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.PhotoSize">
            <summary>This object represents one size of a photo or a file / sticker thumbnail.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PhotoSize.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PhotoSize.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PhotoSize.Width">
            <summary>Photo width.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PhotoSize.Height">
            <summary>Photo height.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PhotoSize.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Poll">
            <summary>This object contains information about a poll.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Poll.Id">
            <summary>Unique poll identifier.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Poll.Question">
            <summary>Poll question, 1-255 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Poll.Options">
            <summary>List of poll options.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Poll.Is_closed">
            <summary>True, if the poll is closed.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.PollOption">
            <summary>This object contains information about one answer option in a poll.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PollOption.Text">
            <summary>Option text, 1-100 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.PollOption.Voter_count">
            <summary>Number of users that voted for this option.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ReplyKeyboardMarkup">
            <summary>This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ReplyKeyboardMarkup.Keyboard">
            <summary>Array of button rows, each represented by an Array of KeyboardButton objects.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ReplyKeyboardMarkup.Resize_keyboard">
            <summary>Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboards.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ReplyKeyboardMarkup.One_time_keyboard">
            <summary>Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ReplyKeyboardMarkup.Selective">
            <summary>Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.<para>Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.</para></summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ReplyKeyboardRemove">
            <summary>Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see <see cref="T:TelegramAPI.Available_Types.ReplyKeyboardMarkup"/>).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ReplyKeyboardRemove.Remove_keyboard">
            <summary>Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ReplyKeyboardRemove.Selective">
            <summary>Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.<para>Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.</para></summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ReplyMarkup">
            <summary>Reply Markup</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.ResponseParameters">
            <summary>Contains information about why a request was unsuccessful.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ResponseParameters.Migrate_to_chat_id">
            <summary>Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.ResponseParameters.Retry_after">
            <summary>Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.User">
            <summary>This object represents a Telegram user or bot.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.User.Id">
            <summary>Unique identifier for this user or bot.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.User.Is_bot">
            <summary>True, if this user is a bot.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.User.First_name">
            <summary>User‘s or bot’s first name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.User.Last_name">
            <summary>Optional. User‘s or bot’s last name.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.User.Username">
            <summary>Optional. User‘s or bot’s username.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.User.Language_code">
            <summary>Optional. IETF language tag of the user's language.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.UserProfilePhotos">
            <summary>This object represent a user's profile pictures.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.UserProfilePhotos.Total_count">
            <summary>Total number of profile pictures the target user has.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.UserProfilePhotos.Photos">
            <summary>Requested profile pictures (in up to 4 sizes each).</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Venue">
            <summary>This object represents a venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Venue.Location">
            <summary>Venue location.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Venue.Title">
            <summary>Name of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Venue.Address">
            <summary>Address of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Venue.Foursquare_id">
            <summary>Optional. Foursquare identifier of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Venue.Foursquare_type">
            <summary>Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Video">
            <summary>This object represents a video file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.Width">
            <summary>Video width as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.Height">
            <summary>Video height as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.Duration">
            <summary>Duration of the video in seconds as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.Thumb">
            <summary>Optional. Video thumbnail.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.Mime_type">
            <summary>Optional. Mime type of a file as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Video.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.VideoNote">
            <summary>This object represents a video message (available in Telegram apps as of v.4.0).</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.VideoNote.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.VideoNote.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.VideoNote.Length">
            <summary>Video width and height (diameter of the video message) as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.VideoNote.Duration">
            <summary>Duration of the video in seconds as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.VideoNote.Thumb">
            <summary>Optional. Video thumbnail.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.VideoNote.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.Available_Types.Voice">
            <summary>This object represents a voice note.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Voice.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Voice.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Voice.Duration">
            <summary>Duration of the audio in seconds as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Voice.Mime_type">
            <summary>Optional. MIME type of the file as defined by sender.</summary>
        </member>
        <member name="P:TelegramAPI.Available_Types.Voice.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.BotClient">
            <summary>Telegram Bot Client.</summary>
        </member>
        <member name="P:TelegramAPI.BotClient.Token">
            <summary>Token granted by BotFather. Required to access the Telegram bot API.</summary>
        </member>
        <member name="P:TelegramAPI.BotClient.IgnoreBotExceptions">
            <summary>Set true if you want methods to return a default value when bot requests are rejected instead of throwing a <see cref="T:TelegramAPI.BotRequestException"/></summary>
        </member>
        <member name="M:TelegramAPI.BotClient.#ctor(System.String)">
            <summary>Initialize a Telegram Bot Client.</summary>
            <param name="accessToken">Token granted by BotFather. Required to access the Telegram bot API.</param>
        </member>
        <member name="M:TelegramAPI.BotClient.RPC``1(System.String,System.Object)">
            <summary>RPC</summary>
            <typeparam name="T">return type.</typeparam>
            <param name="method">method name</param>
            <param name="args">parameters</param>
        </member>
        <member name="M:TelegramAPI.BotClient.RPCA``1(System.String,System.Object)">
            <summary>RPC async</summary>
            <typeparam name="T">return type.</typeparam>
            <param name="method">method name</param>
            <param name="args">parameters</param>
        </member>
        <member name="M:TelegramAPI.BotClient.RPCF``1(System.String,System.Object)">
            <summary>RPC for files</summary>
            <typeparam name="T">return type.</typeparam>
            <param name="method">method name</param>
            <param name="args">parameters</param>
        </member>
        <member name="M:TelegramAPI.BotClient.RPCAF``1(System.String,System.Object)">
            <summary>RPC async for files</summary>
            <typeparam name="T">return type.</typeparam>
            <param name="method">method name</param>
            <param name="args">parameters</param>
        </member>
        <member name="T:TelegramAPI.BotRequestException">
            <summary>Excepcion que se genera cuando una peticion hacia el api bot de telegram obtuvo una respuesta de error.</summary>
        </member>
        <member name="P:TelegramAPI.BotRequestException.Error_code">
            <summary>Error code.</summary>
        </member>
        <member name="P:TelegramAPI.BotRequestException.Description">
            <summary>Error description.</summary>
        </member>
        <member name="T:TelegramAPI.BotResponse`1">
            <summary>Represents the bot's response to the request.</summary>
            <typeparam name="T">Result type.</typeparam>
        </member>
        <member name="P:TelegramAPI.BotResponse`1.Ok">
            <summary>True, if the request was successful, otherwise false.</summary>
        </member>
        <member name="P:TelegramAPI.BotResponse`1.Result">
            <summary>Result.</summary>
        </member>
        <member name="P:TelegramAPI.BotResponse`1.Error_code">
            <summary>Error code.</summary>
        </member>
        <member name="P:TelegramAPI.BotResponse`1.Description">
            <summary>Error description.</summary>
        </member>
        <member name="T:TelegramAPI.Games.GetGameScoreArgs">
            <summary>GetGameScore method args.</summary>
        </member>
        <member name="P:TelegramAPI.Games.GetGameScoreArgs.User_id">
            <summary>Target user id.</summary>
        </member>
        <member name="P:TelegramAPI.Games.GetGameScoreArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat.</summary>
        </member>
        <member name="P:TelegramAPI.Games.GetGameScoreArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the sent message.</summary>
        </member>
        <member name="P:TelegramAPI.Games.GetGameScoreArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="T:TelegramAPI.Games.SendGameArgs">
            <summary>SendGame method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SendGameArgs.Chat_id">
            <summary>Unique identifier for the target chat.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SendGameArgs.Game_short_name">
            <summary>Short name of the game, serves as the unique identifier for the game. Set up your games via BotFather.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SendGameArgs.Disable_notification">
            <summary>Optional. Sends the message silently. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SendGameArgs.Reply_to_message_id">
            <summary>Optional. If the message is a reply, ID of the original message.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SendGameArgs.Reply_markup">
            <summary>Optional. A JSON-serialized object for an inline keyboard. If empty, one ‘Play game_title’ button will be shown. If not empty, the first button must launch the game.</summary>
        </member>
        <member name="T:TelegramAPI.Games.SetGameScoreArgs">
            <summary>SetGameScore method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.User_id">
            <summary>User identifier.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.Score">
            <summary>New score.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.Force">
            <summary>Optional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.Disable_edit_message">
            <summary>Optional. Pass True, if the game message should not be automatically edited to include the current scoreboard.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the sent message.</summary>
        </member>
        <member name="P:TelegramAPI.Games.SetGameScoreArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="T:TelegramAPI.Games.CallbackGame">
            <summary>A placeholder, currently holds no information. Use BotFather to set up your game.</summary>
        </member>
        <member name="T:TelegramAPI.Games.Game">
            <summary>This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.</summary>
        </member>
        <member name="P:TelegramAPI.Games.Game.Title">
            <summary>Title of the game.</summary>
        </member>
        <member name="P:TelegramAPI.Games.Game.Description">
            <summary>Description of the game.</summary>
        </member>
        <member name="P:TelegramAPI.Games.Game.Photo">
            <summary>Photo that will be displayed in the game message in chats.</summary>
        </member>
        <member name="P:TelegramAPI.Games.Game.Text">
            <summary>Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Games.Game.Text_entities">
            <summary>Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.</summary>
        </member>
        <member name="P:TelegramAPI.Games.Game.Animation">
            <summary>Optional. Animation that will be displayed in the game message in chats. Upload via BotFather.</summary>
        </member>
        <member name="T:TelegramAPI.Games.GameHighScore">
            <summary>This object represents one row of the high scores table for a game.</summary>
        </member>
        <member name="P:TelegramAPI.Games.GameHighScore.Position">
            <summary>Position in high score table for the game</summary>
        </member>
        <member name="P:TelegramAPI.Games.GameHighScore.User">
            <summary>User</summary>
        </member>
        <member name="P:TelegramAPI.Games.GameHighScore.Score">
            <summary>Score</summary>
        </member>
        <member name="T:TelegramAPI.Games.GamesMethods">
            <summary>Extension methods for Games</summary>
        </member>
        <member name="M:TelegramAPI.Games.GamesMethods.GetGameScore(TelegramAPI.BotClient,TelegramAPI.Games.GetGameScoreArgs)">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects.<para>This method will currently return scores for the target user, plus two of his closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.</para></summary>
            <param name="T">BotClient</param>
             <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Games.GamesMethods.GetGameScoreAsync(TelegramAPI.BotClient,TelegramAPI.Games.GetGameScoreArgs)">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of his neighbors in a game. On success, returns an Array of GameHighScore objects.<para>This method will currently return scores for the target user, plus two of his closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.</para></summary>
            <param name="T">BotClient</param>
             <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Games.GamesMethods.SendGame(TelegramAPI.BotClient,TelegramAPI.Games.SendGameArgs)">
            <summary>Use this method to send a game. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:TelegramAPI.Games.GamesMethods.SendGameAsync(TelegramAPI.BotClient,TelegramAPI.Games.SendGameArgs)">
            <summary>Use this method to send a game. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:TelegramAPI.Games.GamesMethods.SetGameScore(TelegramAPI.BotClient,TelegramAPI.Games.SetGameScoreArgs)">
            <summary>Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns True. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.</summary>
            <param name="T">BotClient</param>
             <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Games.GamesMethods.SetGameScoreAsync(TelegramAPI.BotClient,TelegramAPI.Games.SetGameScoreArgs)">
            <summary>Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns True. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.</summary>
            <param name="T">BotClient</param>
             <param name="args">Parameters.</param>
        </member>
        <member name="T:TelegramAPI.Getting_updates.GetUpdatesArgs">
            <summary>GetUpdate method arguments</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.GetUpdatesArgs.Offset">
            <summary>Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.GetUpdatesArgs.Limit">
            <summary>Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.GetUpdatesArgs.Timeout">
            <summary>Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.GetUpdatesArgs.Allowed_updates">
            <summary>List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.<para>Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.</para></summary>
        </member>
        <member name="T:TelegramAPI.Getting_updates.SetWebhookArgs">
            <summary>SetWebhook method arguments</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.SetWebhookArgs.Url">
            <summary>HTTPS url to send updates to. Use an empty string to remove webhook integration.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.SetWebhookArgs.Certificate">
            <summary>Upload your public key certificate so that the root certificate in use can be checked. See our <a href="https://core.telegram.org/bots/self-signed">self-signed guide</a> for details.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.SetWebhookArgs.Max_connections">
            <summary>Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot‘s server, and higher values to increase your bot’s throughput.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.SetWebhookArgs.Allowed_updates">
            <summary>List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.<para>Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.</para></summary>
        </member>
        <member name="T:TelegramAPI.Getting_updates.GettingUpdates">
            <summary>Getting Updates</summary>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.DeleteWebhook(TelegramAPI.BotClient)">
            <summary>Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success. Requires no parameters.</summary>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.DeleteWebhookAsync(TelegramAPI.BotClient)">
            <summary>Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success. Requires no parameters.</summary>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.GetUpdates(TelegramAPI.BotClient,TelegramAPI.Getting_updates.GetUpdatesArgs)">
            <summary>Use this method to receive incoming updates using long polling. An Array of <see cref="T:TelegramAPI.Getting_updates.Update"/> objects is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Optional parameters.</param>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.GetUpdatesAsync(TelegramAPI.BotClient,TelegramAPI.Getting_updates.GetUpdatesArgs)">
            <summary>Use this method to receive incoming updates using long polling. An Array of <see cref="T:TelegramAPI.Getting_updates.Update"/> objects is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Optional parameters.</param>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.GetWebhookInfo(TelegramAPI.BotClient)">
            <summary>Use this method to get current webhook status. On success, returns a <see cref="T:TelegramAPI.Getting_updates.WebhookInfo"/> object. If the bot is using getUpdates, will return an object with the url field empty.</summary>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.GetWebhookInfoAsync(TelegramAPI.BotClient)">
            <summary>Use this method to get current webhook status. On success, returns a <see cref="T:TelegramAPI.Getting_updates.WebhookInfo"/> object. If the bot is using getUpdates, will return an object with the url field empty.</summary>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.SetWebhook(TelegramAPI.BotClient,TelegramAPI.Getting_updates.SetWebhookArgs)">
            <summary>Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Getting_updates.GettingUpdates.SetWebhookAsync(TelegramAPI.BotClient,TelegramAPI.Getting_updates.SetWebhookArgs)">
            <summary>Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="T:TelegramAPI.Getting_updates.UpdateType">
            <summary>Available update types.</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Unknown">
            <summary>Unknown update type</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Message">
            <summary>Message update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Edited_message">
            <summary>Edited message update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Channel_post">
            <summary>Channel post update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Edited_channel_post">
            <summary>Edited channel post update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Inline_query">
            <summary>Inline query update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Chosen_inline_result">
            <summary>Chosen inline result update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Callback_query">
            <summary>Callback query update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Shipping_query">
            <summary>Shipping query update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Pre_checkout_query">
            <summary>Pre checkout query update</summary>
        </member>
        <member name="F:TelegramAPI.Getting_updates.UpdateType.Poll">
            <summary>Poll update</summary>
        </member>
        <member name="T:TelegramAPI.Getting_updates.Update">
            <summary>This object represents an incoming update. 
            At most one of the optional parameters can be present in any given update.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Update_id">
            <summary>The update‘s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you’re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Message">
            <summary>Optional. New incoming message of any kind — text, photo, sticker, etc.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Edited_message">
            <summary>Optional. New version of a message that is known to the bot and was edited.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Channel_post">
            <summary>Optional. New incoming channel post of any kind — text, photo, sticker, etc.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Edited_channel_post">
            <summary>Optional. New version of a channel post that is known to the bot and was edited.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Inline_query">
            <summary>Optional. New incoming inline query.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Chosen_inline_result">
            <summary>Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Callback_query">
            <summary>Optional. New incoming callback query.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Shipping_query">
            <summary>Optional. New incoming shipping query. Only for invoices with flexible price.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Pre_checkout_query">
            <summary>Optional. New incoming pre-checkout query. Contains full information about checkout.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Poll">
            <summary>Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.Update.Type">
            <summary>Update type.</summary>
        </member>
        <member name="T:TelegramAPI.Getting_updates.WebhookInfo">
            <summary>Contains information about the current status of a webhook.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Url">
            <summary>Webhook URL, may be empty if webhook is not set up.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Has_custom_certificate">
            <summary>True, if a custom certificate was provided for webhook certificate checks.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Pending_update_count">
            <summary>Number of updates awaiting delivery.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Last_error_date">
            <summary>Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Last_error_message">
            <summary>Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Max_connections">
            <summary>Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery.</summary>
        </member>
        <member name="P:TelegramAPI.Getting_updates.WebhookInfo.Allowed_updates">
            <summary>Optional. A list of update types the bot is subscribed to. Defaults to all update types.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.Inlinemode">
            <summary>Inline mode</summary>
        </member>
        <member name="M:TelegramAPI.Inline_mode.Inlinemode.AnswerInlineQuery(TelegramAPI.BotClient,TelegramAPI.Inline_mode.AnswerInlineQueryArgs)">
            <summary>Use this method to send answers to an inline query. On success, True is returned. 
            No more than 50 results per query are allowed.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Inline_mode.Inlinemode.AnswerInlineQueryAsync(TelegramAPI.BotClient,TelegramAPI.Inline_mode.AnswerInlineQueryArgs)">
            <summary>Use this method to send answers to an inline query. On success, True is returned. 
            No more than 50 results per query are allowed.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="T:TelegramAPI.Inline_mode.AnswerInlineQueryArgs">
            <summary>AnswerInlineQuery method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Inline_query_id">
            <summary>Unique identifier for the answered query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Results">
            <summary>A <see cref="T:TelegramAPI.Inline_mode.InlineQueryResult"/> array of results for the inline query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Cache_time">
            <summary>The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Is_personal">
            <summary>Pass True, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Next_offset">
            <summary>Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Switch_pm_text">
            <summary>If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switch_pm_parameter.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.AnswerInlineQueryArgs.Switch_pm_parameter">
            <summary>Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.ChosenInlineResult">
            <summary>Represents a result of an inline query that was chosen by the user and sent to their chat partner.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.ChosenInlineResult.Result_id">
            <summary>The unique identifier for the result that was chosen.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.ChosenInlineResult.From">
            <summary>The user that chose the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.ChosenInlineResult.Location">
            <summary>Optional. Sender location, only for bots that require user location.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.ChosenInlineResult.Inline_message_id">
            <summary>Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.ChosenInlineResult.Query">
            <summary>The query that was used to obtain the result.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQuery">
            <summary>This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQuery.Id">
            <summary>Unique identifier for this query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQuery.From">
            <summary>Sender.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQuery.Location">
            <summary>Optional. Sender location, only for bots that request user location.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQuery.Query">
            <summary>Text of the query (up to 512 characters).</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQuery.Offset">
            <summary>Offset of the results to be returned, can be controlled by the bot.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResult">
            <summary>This object represents one result of an inline query. Telegram clients currently support results of the following 20 types: <br /><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedGif"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedSticker"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultArticle"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultAudio"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultContact"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultGame"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultDocument"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultGif"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultLocation"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultPhoto"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultVenue"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultVideo"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InlineQueryResultVoice"/></summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResult.Type">
            <summary>Type of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResult.Id">
            <summary>Unique identifier for this result, 1-64 Bytes.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResult.Title">
            <summary>Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResult.Input_message_content">
            <summary>Content of the message to be sent.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResult.Reply_markup">
            <summary>Optional. Inline keyboard attached to the message.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultArticle">
            <summary>Represents a link to an article or web page.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Type">
            <summary>Type of the result, must be article.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Url">
            <summary>Optional. URL of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Hide_url">
            <summary>Optional. Pass True, if you don't want the URL to be shown in the message.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Thumb_url">
            <summary>URL of the static thumbnail for the result (jpeg or gif).</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Thumb_width">
            <summary>Optional. Thumbnail width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultArticle.Thumb_height">
            <summary>Optional. Thumbnail height.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultAudio">
            <summary>Represents a link to an mp3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Type">
            <summary>Type of the result, must be audio.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Audio_url">
            <summary>A valid URL for the audio file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Caption">
            <summary>Optional. Caption, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Performer">
            <summary>Optional. Performer.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Audio_duration">
            <summary>Optional. Audio duration in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultAudio.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the audio.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio">
            <summary>Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio.Type">
            <summary>Type of the result, must be audio.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio.Audio_file_id">
            <summary>A valid file identifier for the audio file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio.Caption">
            <summary>Optional. Caption, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption..</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the audio.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedAudio.Title">
            <summary>Title of the result.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument">
            <summary>Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument.Type">
            <summary>Type of the result, must be document.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument.Document_file_id">
            <summary>A valid file identifier for the file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument.Caption">
            <summary>Optional. Caption of the document to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedDocument.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the file.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedGif">
            <summary>Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedGif.Type">
            <summary>Type of the result, must be gif.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedGif.Gif_file_id">
            <summary>A valid file identifier for the GIF file..</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedGif.Title">
            <summary>Optional. Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedGif.Caption">
            <summary>Optional. Caption of the GIF file to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedGif.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedGif.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the GIF animation.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif">
            <summary>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif.Type">
            <summary>Type of the result, must be mpeg4_gif.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif.Mpeg4_file_id">
            <summary>A valid file identifier for the MP4 file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif.Title">
            <summary>Optional. Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif.Caption">
            <summary>Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedMpeg4Gif.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the video animation.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto">
            <summary>Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Type">
            <summary>Type of the result, must be photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Photo_file_id">
            <summary>A valid file identifier of the photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Title">
            <summary>Optional. Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Caption">
            <summary>Optional. Caption of the photo to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedPhoto.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the photo.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedSticker">
            <summary>Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedSticker.Type">
            <summary>Type of the result, must be mpeg4_gif.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedSticker.Sticker_file_id">
            <summary>A valid file identifier of the sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedSticker.Title">
            <summary>Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedSticker.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the sticker</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo">
            <summary>Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo.Type">
            <summary>Type of the result, must be video.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo.Video_file_id">
            <summary>A valid file identifier for the video file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo.Caption">
            <summary>Optional. Caption of the video to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption..</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVideo.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice">
            <summary>Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice.Type">
            <summary>Type of the result, must be voice</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice.Voice_file_id">
            <summary>A valid file identifier for the voice message.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice.Title">
            <summary>Voice message title.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice.Caption">
            <summary>Optional. Caption, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption..</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultCachedVoice.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the voice message.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultContact">
            <summary>Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Type">
            <summary>Type of the result, must be contact.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Phone_number">
            <summary>Contact's phone number.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.First_name">
            <summary>Contact's first name.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Last_name">
            <summary>Optional. Contact's last name.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Vcard">
            <summary>Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the contact.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Thumb_url">
            <summary>Optional. Url of the thumbnail for the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Thumb_width">
            <summary>Optional. Thumbnail width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultContact.Thumb_height">
            <summary>Optional. Thumbnail height.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultDocument">
            <summary>Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Type">
            <summary>Type of the result, must be document.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Caption">
            <summary>Optional. Caption of the document to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Document_url">
            <summary>A valid URL for the file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Mime_type">
            <summary>Mime type of the content of the file, either “application/pdf” or “application/zip”.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Thumb_url">
            <summary>Optional. URL of the thumbnail (jpeg only) for the file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Thumb_width">
            <summary>Optional. Thumbnail width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultDocument.Thumb_height">
            <summary>Optional. Thumbnail height.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultGame">
            <summary>Represents a Game.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGame.Type">
            <summary>Type of the result, must be game.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGame.Game_short_name">
            <summary>Short name of the game.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGame.Title">
            <summary>Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGame.Input_message_content">
            <summary>Content of the message to be sent.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultGif">
            <summary>Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Type">
            <summary>Type of the result, must be gif.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Gif_url">
            <summary>A valid URL for the GIF file. File size must not exceed 1MB.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Gif_width">
            <summary>Optional. Width of the GIF.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Gif_height">
            <summary>Optional. Height of the GIF.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Gif_duration">
            <summary>Optional. Duration of the GIF.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Thumb_url">
            <summary>URL of the static thumbnail for the result (jpeg or gif).</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Title">
            <summary>Optional. Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Caption">
            <summary>Optional. Caption of the GIF file to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultGif.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the GIF animation.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultLocation">
            <summary>Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Type">
            <summary>Type of the result, must be location.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Latitude">
            <summary>Location latitude in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Longitude">
            <summary>Location longitude in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Live_period">
            <summary>Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Thumb_url">
            <summary>Optional. Url of the thumbnail for the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Thumb_width">
            <summary>Optional. Thumbnail width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultLocation.Thumb_height">
            <summary>Optional. Thumbnail height.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif">
            <summary>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Type">
            <summary>Type of the result, must be mpeg4_gif.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Mpeg4_url">
            <summary>A valid URL for the MP4 file. File size must not exceed 1MB.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Mpeg4_width">
            <summary>Optional. Video width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Mpeg4_height">
            <summary>Optional. Video height.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Mpeg4_duration">
            <summary>Optional. Video height.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Thumb_url">
            <summary>URL of the static thumbnail for the result (jpeg or gif).</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Title">
            <summary>Optional. Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Caption">
            <summary>Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultMpeg4Gif.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the video animation.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultPhoto">
            <summary>Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Type">
            <summary>Type of the result, must be photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Photo_url">
            <summary>A valid URL of the photo. Photo must be in jpeg format. Photo size must not exceed 5MB.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Title">
            <summary>Optional. Title of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Thumb_url">
            <summary>URL of the static thumbnail for the result (jpeg or gif).</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Photo_width">
            <summary>Optional. Width of the photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Photo_height">
            <summary>Optional. Height of the photo.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Caption">
            <summary>Optional. Caption of the photo to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultPhoto.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the photo.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultVenue">
            <summary>Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Type">
            <summary>Type of the result, must be venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Latitude">
            <summary>Latitude of the venue location in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Longitude">
            <summary>Longitude of the venue location in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Title">
            <summary>Title of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Address">
            <summary>Address of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Foursquare_id">
            <summary>Optional. Foursquare identifier of the venue if known.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Foursquare_type">
            <summary>Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Thumb_url">
            <summary>Optional. Url of the thumbnail for the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Thumb_width">
            <summary>Optional. Thumbnail width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVenue.Thumb_height">
            <summary>Optional. Thumbnail height.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultVideo">
            <summary>Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Type">
            <summary>Type of the result, must be video.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Video_url">
            <summary>A valid URL for the embedded video player or video file.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Mime_type">
            <summary>Mime type of the content of video url, “text/html” or “video/mp4”.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Thumb_url">
            <summary>URL of the thumbnail (jpeg only) for the video.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Caption">
            <summary>Optional. Caption of the video to be sent, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Video_width">
            <summary>Optional. Video width.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Video_height">
            <summary>Optional. Video height.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Video_duration">
            <summary>Optional. Video duration in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Description">
            <summary>Optional. Short description of the result.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVideo.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InlineQueryResultVoice">
            <summary>Represents a link to a voice recording in an .ogg container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVoice.Type">
            <summary>Type of the result, must be voice.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVoice.Voice_url">
            <summary>A valid URL for the voice recording.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVoice.Caption">
            <summary>Optional. Caption, 0-1024 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVoice.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVoice.Voice_duration">
            <summary>Optional. Recording duration in seconds.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InlineQueryResultVoice.Input_message_content">
            <summary>Optional. Content of the message to be sent instead of the voice message.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InputContactMessageContent">
            <summary>Represents the content of a contact message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputContactMessageContent.Phone_number">
            <summary>Contact's phone number.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputContactMessageContent.First_name">
            <summary>Contact's first name.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputContactMessageContent.Last_name">
            <summary>Optional. Contact's last name.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputContactMessageContent.Vcard">
            <summary>Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InputLocationMessageContent">
            <summary>Represents the content of a location message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputLocationMessageContent.Latitude">
            <summary>Latitude of the location in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputLocationMessageContent.Longitude">
            <summary>Longitude of the location in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputLocationMessageContent.Live_period">
            <summary>Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InputMessageContent">
            <summary>This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types: <br /><br />
            • <see cref="T:TelegramAPI.Inline_mode.InputTextMessageContent"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InputLocationMessageContent"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InputVenueMessageContent"/><br />
            • <see cref="T:TelegramAPI.Inline_mode.InputVenueMessageContent"/></summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InputTextMessageContent">
            <summary>Represents the content of a text message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputTextMessageContent.Message_text">
            <summary>Text of the message to be sent, 1-4096 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputTextMessageContent.Parse_mode">
            <summary>Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputTextMessageContent.Disable_web_page_preview">
            <summary>Optional. Disables link previews for links in the sent message.</summary>
        </member>
        <member name="T:TelegramAPI.Inline_mode.InputVenueMessageContent">
            <summary>Represents the content of a venue message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputVenueMessageContent.Latitude">
            <summary>Latitude of the venue in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputVenueMessageContent.Longitude">
            <summary>Longitude of the venue in degrees.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputVenueMessageContent.Title">
            <summary>Name of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputVenueMessageContent.Address">
            <summary>Address of the venue.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputVenueMessageContent.Foursquare_id">
            <summary>Optional. Foursquare identifier of the venue, if known.</summary>
        </member>
        <member name="P:TelegramAPI.Inline_mode.InputVenueMessageContent.Foursquare_type">
            <summary>Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="T:TelegramAPI.ParseMode">
            <summary><b>Formatting options</b><br/>
            <para>The Bot API supports basic formatting for messages. You can use bold, italic, underlined and strikethrough text, as well as inline links and pre-formatted code in your bots' messages. Telegram clients will render them accordingly. You can use either markdown-style or HTML-style formatting.</para>
            <para>Note that Telegram clients will display an alert to the user before opening an inline link (‘Open this link?’ together with the full URL).</para>
            <para>Message entities can be nested, providing following restrictions are met: <br/>
            - If two entities has common characters then one of them is fully contained inside another.<br/>
            - bold, italic, underline and strikethrough entities can contain and to be contained in any other entities, except pre and code.<br/>
            - All other entities can't contain each other.</para>
            <para>
            Links tg://user?id=&lt;user_id&gt; can be used to mention a user by their ID without using a username. Please note:<br/>
            • These links will work <b>only</b> if they are used inside an inline link. For example, they will not work, when used in an inline keyboard button or in a message text.<br/>
            • These mentions are only guaranteed to work if the user has contacted the bot in the past, has sent a callback query to the bot via inline button or is a member in the group where he was mentioned.
            </para></summary>
        </member>
        <member name="P:TelegramAPI.ParseMode.Markdown">
            <summary>To use this mode, pass Markdown in the parse_mode field. Use the following syntax in your message:
            <para>*bold text*<br/>
            _italic text_<br/>
            [inline URL](http://www.example.com/)<br/>
            [inline mention of a user] (tg://user?id=123456789)<br/>
            `inline fixed-width code`<br/>
            ```<br/>
            pre - formatted fixed-width code block<br/>
            ```<br/>
            ```python<br/>
            pre - formatted fixed-width code block written in the Python programming language<br/>
            ```</para>
            <para>Please note.</para>
            <para>
            • Entities must not be nested, use parse mode MarkdownV2 instead.<br/>
            • There is no way to specify underline and strikethrough entities, use parse mode MarkdownV2 instead.<br/>
            • To escape characters '_‘, ’*‘, ’`‘, ’[‘ outside of an entity, prepend the characters ’\' before them.<br/>
            • Escaping inside entities is not allowed, so entity must be closed first and reopened again: use <i>_snake_\__case_</i> for italic <i>snake_case</i> and <i>*2*\**2=4*</i> for bold <i>2*2=4</i>.</para>
            </summary>
        </member>
        <member name="P:TelegramAPI.ParseMode.MarkdownV2">
            <summary>To use this mode, pass MarkdownV2 in the parse_mode field. Use the following syntax in your message:
            <para>*bold \*text*<br/>
            _italic \*text_<br/>
            __underline__<br/>
            ~strikethrough~<br/>
            *bold _italic bold ~italic bold strikethrough~__underline italic bold___ bold*<br/>
            [inline URL] (http://www.example.com/)<br/>
            [inline mention of a user] (tg://user?id=123456789)<br/>
            `inline fixed-width code`<br/>
            ```<br/>
            pre - formatted fixed-width code block<br/>
            ```<br/>
            ```python<br/>
            pre - formatted fixed-width code block written in the Python programming language<br/>
            </para>
            <para>Please note:</para>
            <para>• Any character between 1 and 126 inclusively can be escaped anywhere with a preceding '\' character, in which case it is treated as an ordinary character and not a part of the markup.<br/>
            • Inside pre and code entities, all '`‘ and ’\‘ characters must be escaped with a preceding ’\' character.<br/>
            • Inside(...) part of inline link definition, all ')‘ and ’\‘ must be escaped with a preceding ’\' character.<br/>
            • In all other places characters '_‘, ’*‘, ’[‘, ’]‘, ’(‘, ’)‘, ’~‘, ’`‘, ’>‘, ’#‘, ’+‘, ’-‘, ’=‘, ’|‘, ’{‘, ’}‘, ’.‘, ’!‘ must be escaped with the preceding character ’\'.<br/>
            • In case of ambiguity between italic and underline entities ‘__’ is always greadily treated from left to right as beginning or end of underline entity, so instead of ___italic underline___ use ___italic underline_\r__, where \r is a character with code 13, which will be ignored.</para>
            </summary>
        </member>
        <member name="P:TelegramAPI.ParseMode.HTML">
            <summary>To use this mode, pass HTML in the parse_mode field. The following tags are currently supported:
            <para>&lt;b&gt;bold&lt;/b&gt;, &lt;strong&gt;bold&lt;/strong&gt;<br/>
            &lt;i&gt;italic&lt;/i&gt;, &lt;em&gt;italic&lt;/em&gt;<br/>
            &lt;u&gt;underline&lt;/u&gt;, &lt;ins&gt;underline&lt;/ins&gt;<br/>
            &lt;s&gt;strikethrough&lt;/s&gt;, &lt;strike&gt;strikethrough&lt;/strike&gt;, &lt;del&gt;strikethrough&lt;/del&gt;<br/>
            &lt;b&gt;bold&lt;i&gt; italic bold&lt;s&gt; italic bold strikethrough&lt;/s&gt; &lt;u&gt;underline italic bold&lt;/u&gt;&lt;/i&gt; bold&lt;/b&gt;<br/>
            &lt;a href = "http://www.example.com/" &gt; inline URL&lt;/a&gt;<br/>
            &lt;a href = "tg://user?id=123456789" &gt; inline mention of a user&lt;/a&gt;<br/>
            &lt;code&gt;inline fixed-width code &lt;/ code &gt;<br/>
            &lt; pre &gt; pre - formatted fixed-width code block &lt;/pre &gt;<br/>
            &lt; pre &gt;&lt; code class="language-python"&gt;pre-formatted fixed-width code block written in the Python programming language &lt;/code &gt;&lt;/pre &gt;
            </para>
            <para>Please note:</para>
            <para>Only the tags mentioned above are currently supported. <br/>
            • All&lt;,&gt; and &amp; symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (&lt; with &amp;lt;, &gt; with &amp;gt; and &amp; with &amp;amp;). <br/>
            • All numerical HTML entities are supported. <br/>
            • The API currently supports only the following named HTML entities: &amp;lt;, &amp;gt;, &amp;amp; and &amp;quot;.<br/>
            • Use nested <i>pre</i> and <i>code</i> tags, to define programming language for <i>pre</i> entity. <br/>
            • Programming language can't be specified for standalone <i>code</i> tags.</para></summary>
        </member>
        <member name="T:TelegramAPI.Payments.PaymentsMethods">
            <summary>Payments</summary>
        </member>
        <member name="M:TelegramAPI.Payments.PaymentsMethods.AnswerPreCheckoutQuery(TelegramAPI.BotClient,System.String,System.Boolean,System.String)">
            <summary>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.</summary>
            <param name="T">Bot Client</param>
            <param name="pre_checkout_query_id">Unique identifier for the query to be answered.</param>
            <param name="ok">Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.</param>
            <param name="error_message">Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.</param>
            <returns>On success, True is returned.</returns>
        </member>
        <member name="M:TelegramAPI.Payments.PaymentsMethods.AnswerPreCheckoutQueryAsync(TelegramAPI.BotClient,System.String,System.Boolean,System.String)">
            <summary>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.</summary>
            <param name="T">Bot Client</param>
            <param name="pre_checkout_query_id">Unique identifier for the query to be answered.</param>
            <param name="ok">Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.</param>
            <param name="error_message">Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.</param>
            <returns>On success, True is returned.</returns>
        </member>
        <member name="M:TelegramAPI.Payments.PaymentsMethods.AnswerShippingQuery(TelegramAPI.BotClient,System.String,System.Boolean,TelegramAPI.Payments.ShippingOption[],System.String)">
            <summary>If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="shipping_query_id">Unique identifier for the query to be answered</param>
            <param name="ok">Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible).</param>
            <param name="shipping_options">Required if ok is True. A JSON-serialized array of available shipping options.</param>
            <param name="error_message">Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.</param>
            <returns></returns>
        </member>
        <member name="M:TelegramAPI.Payments.PaymentsMethods.AnswerShippingQueryAsync(TelegramAPI.BotClient,System.String,System.Boolean,TelegramAPI.Payments.ShippingOption[],System.String)">
            <summary>If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="shipping_query_id">Unique identifier for the query to be answered</param>
            <param name="ok">Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible).</param>
            <param name="shipping_options">Required if ok is True. A JSON-serialized array of available shipping options.</param>
            <param name="error_message">Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.</param>
            <returns></returns>
        </member>
        <member name="M:TelegramAPI.Payments.PaymentsMethods.SendInvoice(TelegramAPI.BotClient,TelegramAPI.Payments.SendInvoiceArgs)">
            <summary>Use this method to send invoices. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:TelegramAPI.Payments.PaymentsMethods.SendInvoiceAsync(TelegramAPI.BotClient,TelegramAPI.Payments.SendInvoiceArgs)">
            <summary>Use this method to send invoices. On success, the sent Message is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters</param>
        </member>
        <member name="T:TelegramAPI.Payments.SendInvoiceArgs">
            <summary>SendInvoice method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Chat_id">
            <summary>Unique identifier for the target private chat.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Title">
            <summary>Product name, 1-32 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Description">
            <summary>Product description, 1-255 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Payload">
            <summary>Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Provider_token">
            <summary>Payments provider token, obtained via Botfather.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Start_parameter">
            <summary>Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Currency">
            <summary>Three-letter ISO 4217 currency code, see more <a href="https://core.telegram.org/bots/payments#supported-currencies">on currencies</a>.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Prices">
            <summary>Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Provider_data">
            <summary>Optional. JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Photo_url">
            <summary>Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Photo_size">
            <summary>Optional. Photo size.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Photo_width">
            <summary>Optional. Photo width.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Photo_height">
            <summary>Optional. Photo height.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Need_name">
            <summary>Optional. Pass True, if you require the user's full name to complete the order.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Need_phone_number">
            <summary>Optional. Pass True, if you require the user's phone number to complete the order.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Need_email">
            <summary>Optional. Pass True, if you require the user's email address to complete the order.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Need_shipping_addressl">
            <summary>Optional. Pass True, if you require the user's shipping address to complete the order.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Send_phone_number_to_provider">
            <summary>Optional. Pass True, if user's phone number should be sent to provider.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Send_email_to_provider">
            <summary>Optional. Pass True, if user's email address should be sent to provider.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Is_flexible">
            <summary>Optional. Pass True, if the final price depends on the shipping method.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Disable_notification">
            <summary>Optional. Sends the message silently. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.reply_to_message_id">
            <summary>Optional. If the message is a reply, ID of the original message.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SendInvoiceArgs.Reply_markup">
            <summary>Optional. A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.</summary>
        </member>
        <member name="T:TelegramAPI.Payments.Invoice">
            <summary>This object contains basic information about an invoice.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.Invoice.Title">
            <summary>Product name.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.Invoice.Description">
            <summary>Product description.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.Invoice.Start_parameter">
            <summary>Unique bot deep-linking parameter that can be used to generate this invoice.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.Invoice.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.Invoice.Total_amount">
            <summary>Total price in the <i>smallest units</i> of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the <i>exp</i> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="T:TelegramAPI.Payments.LabeledPrice">
            <summary>This object represents a portion of the price for goods or services.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.LabeledPrice.Label">
            <summary>Portion label.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.LabeledPrice.Amount">
            <summary>Price of the product in the smallest units of the <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="T:TelegramAPI.Payments.OrderInfo">
            <summary>This object represents information about an order.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.OrderInfo.Name">
            <summary>Optional. User name</summary>
        </member>
        <member name="P:TelegramAPI.Payments.OrderInfo.Phone_number">
            <summary>Optional. User's phone number</summary>
        </member>
        <member name="P:TelegramAPI.Payments.OrderInfo.Email">
            <summary>Optional. User email</summary>
        </member>
        <member name="P:TelegramAPI.Payments.OrderInfo.Shipping_address">
            <summary>Optional. User shipping address</summary>
        </member>
        <member name="T:TelegramAPI.Payments.PreCheckoutQuery">
            <summary>This object contains information about an incoming pre-checkout query.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.Id">
            <summary>Unique query identifier</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.From">
            <summary>User who sent the query</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.Total_amount">
            <summary>Total price in the <i>smallest units</i> of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the <i>exp</i> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.Invoice_payload">
            <summary>Bot specified invoice payload.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.Shipping_option_id">
            <summary>Optional. Identifier of the shipping option chosen by the user.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.PreCheckoutQuery.Order_info">
            <summary>Optional. Order info provided by the user.</summary>
        </member>
        <member name="T:TelegramAPI.Payments.ShippingAddress">
            <summary>This object represents a shipping address.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingAddress.Country_code">
            <summary>ISO 3166-1 alpha-2 country code</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingAddress.State">
            <summary>State, if applicable</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingAddress.City">
            <summary>City</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingAddress.Street_line1">
            <summary>First line for the address</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingAddress.Street_line2">
            <summary>Second line for the address</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingAddress.Post_code">
            <summary>Address post code</summary>
        </member>
        <member name="T:TelegramAPI.Payments.ShippingOption">
            <summary>This object represents one shipping option.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingOption.Id">
            <summary>Shipping option identifier</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingOption.Title">
            <summary>Option title</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingOption.Prices">
            <summary>List of price portions</summary>
        </member>
        <member name="T:TelegramAPI.Payments.ShippingQuery">
            <summary>This object contains information about an incoming shipping query.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingQuery.Id">
            <summary>Unique query identifier</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingQuery.From">
            <summary>User who sent the query</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingQuery.Invoice_payload">
            <summary>Bot specified invoice payload</summary>
        </member>
        <member name="P:TelegramAPI.Payments.ShippingQuery.Shipping_address">
            <summary>User specified shipping address</summary>
        </member>
        <member name="T:TelegramAPI.Payments.SuccessfulPayment">
            <summary>This object contains basic information about a successful payment.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Total_amount">
            <summary>Total price in the <i>smallest units</i> of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the <i>exp</i> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Invoice_payload">
            <summary>Bot specified invoice payload.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Shipping_option_id">
            <summary>Optional. Identifier of the shipping option chosen by the user.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Order_info">
            <summary>Optional. Order info provided by the user.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Telegram_payment_charge_id">
            <summary>Telegram payment identifier.</summary>
        </member>
        <member name="P:TelegramAPI.Payments.SuccessfulPayment.Provider_payment_charge_id">
            <summary>Provider payment identifier.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.StickersMethods">
            <summary>Stickers</summary>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.AddStickerToSet(TelegramAPI.BotClient,System.Int32,System.String,System.String,System.String,TelegramAPI.Stickers.MaskPosition)">
            <summary>Use this method to add a new sticker to a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">User identifier of sticker set owner.</param>
            <param name="name">User identifier of sticker set owner.</param>
            <param name="png_sticker">Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</param>
            <param name="emojis">One or more emoji corresponding to the sticker.</param>
            <param name="mask_position">A <see cref="T:TelegramAPI.Stickers.MaskPosition"/> for position where the mask should be placed on faces.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.AddStickerToSetAsync(TelegramAPI.BotClient,System.Int32,System.String,System.String,System.String,TelegramAPI.Stickers.MaskPosition)">
            <summary>Use this method to add a new sticker to a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">User identifier of sticker set owner.</param>
            <param name="name">User identifier of sticker set owner.</param>
            <param name="png_sticker">Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</param>
            <param name="emojis">One or more emoji corresponding to the sticker.</param>
            <param name="mask_position">A <see cref="T:TelegramAPI.Stickers.MaskPosition"/> for position where the mask should be placed on faces.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.AddStickerToSet(TelegramAPI.BotClient,System.Int32,System.String,TelegramAPI.Available_Types.InputFile,System.String,TelegramAPI.Stickers.MaskPosition)">
            <summary>Use this method to add a new sticker to a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">User identifier of sticker set owner.</param>
            <param name="name">User identifier of sticker set owner.</param>
            <param name="png_sticker">Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</param>
            <param name="emojis">One or more emoji corresponding to the sticker.</param>
            <param name="mask_position">A <see cref="T:TelegramAPI.Stickers.MaskPosition"/> for position where the mask should be placed on faces.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.AddStickerToSetAsync(TelegramAPI.BotClient,System.Int32,System.String,TelegramAPI.Available_Types.InputFile,System.String,TelegramAPI.Stickers.MaskPosition)">
            <summary>Use this method to add a new sticker to a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">User identifier of sticker set owner.</param>
            <param name="name">User identifier of sticker set owner.</param>
            <param name="png_sticker">Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</param>
            <param name="emojis">One or more emoji corresponding to the sticker.</param>
            <param name="mask_position">A <see cref="T:TelegramAPI.Stickers.MaskPosition"/> for position where the mask should be placed on faces.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.AddStickerToSet(TelegramAPI.BotClient,TelegramAPI.Stickers.AddStickerToSetArgs)">
            <summary>Use this method to add a new sticker to a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.AddStickerToSetAsync(TelegramAPI.BotClient,TelegramAPI.Stickers.AddStickerToSetArgs)">
            <summary>Use this method to add a new sticker to a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.CreateNewStickerSet(TelegramAPI.BotClient,TelegramAPI.Stickers.CreateNewStickerSetArgs)">
            <summary>Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.CreateNewStickerSetAsync(TelegramAPI.BotClient,TelegramAPI.Stickers.CreateNewStickerSetArgs)">
            <summary>Use this method to create new sticker set owned by a user. The bot will be able to edit the created sticker set. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.DeleteStickerFromSet(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to delete a sticker from a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="sticker">File identifier of the sticker.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.DeleteStickerFromSetAsync(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to delete a sticker from a set created by the bot. Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="sticker">File identifier of the sticker.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.GetStickerSet(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to get a sticker set. On success, a StickerSet object is returned.</summary>
            <param name="T">BotClient</param>
            <param name="name">Name of the sticker set.</param>
            <returns><see cref="T:TelegramAPI.Stickers.StickerSet"/> object.</returns>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.GetStickerSetAsync(TelegramAPI.BotClient,System.String)">
            <summary>Use this method to get a sticker set. On success, a StickerSet object is returned.</summary>
            <param name="T">BotClient</param>
            <param name="name">Name of the sticker set.</param>
            <returns><see cref="T:TelegramAPI.Stickers.StickerSet"/> object.</returns>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.SendSticker(TelegramAPI.BotClient,TelegramAPI.Stickers.SendStickerArgs)">
            <summary>Use this method to send static .WEBP or animated .TGS stickers. On success, the sent Message is returned..</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.SendStickerAsync(TelegramAPI.BotClient,TelegramAPI.Stickers.SendStickerArgs)">
            <summary>Use this method to send static .WEBP or animated .TGS stickers. On success, the sent Message is returned..</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.SetStickerPositionInSet(TelegramAPI.BotClient,System.String,System.Int32)">
            <summary>Use this method to move a sticker in a set created by the bot to a specific position . Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="sticker">File identifier of the sticker.</param>
            <param name="position">New sticker position in the set, zero-based.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.SetStickerPositionInSetAsync(TelegramAPI.BotClient,System.String,System.Int32)">
            <summary>Use this method to move a sticker in a set created by the bot to a specific position . Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="sticker">File identifier of the sticker.</param>
            <param name="position">New sticker position in the set, zero-based.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.UploadStickerFile(TelegramAPI.BotClient,System.Int32,TelegramAPI.Available_Types.InputFile)">
            <summary>Use this method to upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">User identifier of sticker file owner.</param>
            <param name="png_sticker">Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.UploadStickerFile(TelegramAPI.BotClient,TelegramAPI.Stickers.UploadStickerFileArgs)">
            <summary>Use this method to upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.UploadStickerFileAsync(TelegramAPI.BotClient,System.Int32,TelegramAPI.Available_Types.InputFile)">
            <summary>Use this method to upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.</summary>
            <param name="T">BotClient</param>
            <param name="user_id">User identifier of sticker file owner.</param>
            <param name="png_sticker">Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px.</param>
        </member>
        <member name="M:TelegramAPI.Stickers.StickersMethods.UploadStickerFileAsync(TelegramAPI.BotClient,TelegramAPI.Stickers.UploadStickerFileArgs)">
            <summary>Use this method to upload a .png file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="T:TelegramAPI.Stickers.AddStickerToSetArgs">
            <summary>AddStickerToSet method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.AddStickerToSetArgs.User_id">
            <summary>User identifier of sticker set owner.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.AddStickerToSetArgs.Name">
            <summary>Sticker set name.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.AddStickerToSetArgs.Png_sticker">
            <summary>Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.AddStickerToSetArgs.Emojis">
            <summary>One or more emoji corresponding to the sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.AddStickerToSetArgs.Mask_position">
            <summary>Optional. A <see cref="T:TelegramAPI.Stickers.MaskPosition"/> object for position where the mask should be placed on faces.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.AddStickerToSetArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.CreateNewStickerSetArgs">
            <summary>CreateNewStickerSet method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.User_id">
            <summary>User identifier of created sticker set owner.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.Name">
            <summary>Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in “_by_&lt;bot username&gt;”. &lt;bot_username&gt; is case insensitive. 1-64 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.Title">
            <summary>Sticker set title, 1-64 characters.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.Png_sticker">
            <summary>Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.Emojis">
            <summary>One or more emoji corresponding to the sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.Contains_masks">
            <summary>Optional. Pass True, if a set of mask stickers should be created.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.Mask_position">
            <summary>Optional. A JSON object for position where the mask should be placed on faces.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.CreateNewStickerSetArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.SendStickerArgs">
            <summary>SendSticker method arguments</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.SendStickerArgs.Sticker">
            <summary>Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .webp file from the Internet, or upload a new one using multipart/form-data.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.SendStickerArgs.AttachFiles">
            <summary>Attached files.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.UploadStickerFileArgs">
            <summary>UploadStickerFile method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.UploadStickerFileArgs.User_id">
            <summary>User identifier of sticker file owner.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.UploadStickerFileArgs.Png_sticker">
            <summary>Png image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.MaskPosition">
            <summary>This object describes the position on faces where a mask should be placed by default.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.MaskPosition.Point">
            <summary>The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.MaskPosition.X_shift">
            <summary>Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.MaskPosition.Y_shift">
            <summary>Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.MaskPosition.Scale">
            <summary>Mask scaling coefficient. For example, 2.0 means double size.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.Sticker">
            <summary>This object represents a sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Width">
            <summary>Sticker width.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Height">
            <summary>Sticker height.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Is_animated">
            <summary>True, if the sticker is animated.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Thumb">
            <summary>Optional. Sticker thumbnail in the .webp or .jpg format.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Emoji">
            <summary>Optional. Emoji associated with the sticker.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Set_name">
            <summary>Optional. Name of the sticker set to which the sticker belongs.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.Mask_position">
            <summary>Optional. For mask stickers, the position where the mask should be placed.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.Sticker.File_size">
            <summary>Optional. File size.</summary>
        </member>
        <member name="T:TelegramAPI.Stickers.StickerSet">
            <summary>This object represents a sticker set.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.StickerSet.Name">
            <summary>Sticker set name.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.StickerSet.Title">
            <summary>Sticker set title.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.StickerSet.Is_animated">
            <summary>True, if the sticker is animated.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.StickerSet.Contains_masks">
            <summary>True, if the sticker set contains masks.</summary>
        </member>
        <member name="P:TelegramAPI.Stickers.StickerSet.Stickers">
            <summary>List of all set stickers.</summary>
        </member>
        <member name="T:TelegramAPI.TBaseBot">
            <summary>Provides pre-implemented properties and methods for creating a Telegram bot.</summary>
        </member>
        <member name="P:TelegramAPI.TBaseBot.TBot">
            <summary>Bot client for API Requets.</summary>
        </member>
        <member name="M:TelegramAPI.TBaseBot.#ctor(System.String)">
            <summary>Initializes TBaseBot implementation</summary>
            <param name="accessToken">Token granted by BotFather. Required to access the Telegram bot API</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnUpdate(TelegramAPI.Getting_updates.Update)">
            <summary>Call the corresponding method according to the type of update provided.</summary>
            <param name="update"></param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnMessage(TelegramAPI.Available_Types.Message)">
            <summary>Executes scheduled instructions for a message update.</summary>
            <param name="message">Message</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnEditedMessage(TelegramAPI.Available_Types.Message)">
            <summary>Executes scheduled instructions for a edited message update.</summary>
            <param name="message">Edited message</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnChannelPost(TelegramAPI.Available_Types.Message)">
            <summary>Executes scheduled instructions for a channel post update.</summary>
            <param name="message">Channel post</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnEditedChannelPost(TelegramAPI.Available_Types.Message)">
            <summary>Executes scheduled instructions for a edited channel post update.</summary>
            <param name="message">Edited channel post</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnInlineQuery(TelegramAPI.Inline_mode.InlineQuery)">
            <summary>Executes scheduled instructions for a inline query update.</summary>
            <param name="inlineQuery">Incoming inline query</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnChosenInlineResult(TelegramAPI.Inline_mode.ChosenInlineResult)">
            <summary>Executes scheduled instructions for a inline result update.</summary>
            <param name="inlineResult">Incoming inline result</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnCallbackQuery(TelegramAPI.Available_Types.CallbackQuery)">
            <summary>Executes scheduled instructions for a callback query update.</summary>
            <param name="callbackQuery">Incoming callback query</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnShippingQuery(TelegramAPI.Payments.ShippingQuery)">
            <summary>Executes scheduled instructions for a shipping query update.</summary>
            <param name="shippingQuery">Incoming shipping query</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnPreCheckoutQuery(TelegramAPI.Payments.PreCheckoutQuery)">
            <summary>Executes scheduled instructions for pre-checkout query update.</summary>
            <param name="preCheckoutQuery">Incoming pre-checkout query</param>
        </member>
        <member name="M:TelegramAPI.TBaseBot.OnPoll(TelegramAPI.Available_Types.Poll)">
            <summary>Executes scheduled instructions for a poll update.</summary>
            <param name="poll">poll</param>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.EncryptedCredentials">
            <summary>Contains data required for decrypting and authenticating EncryptedPassportElement. See the <a href="https://core.telegram.org/passport#receiving-information">Telegram Passport Documentation</a> for a complete description of the data decryption and authentication processes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedCredentials.Data">
            <summary>Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedCredentials.Hash">
            <summary>Base64-encoded data hash for data authentication.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedCredentials.Secret">
            <summary>Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.EncryptedPassportElement">
            <summary>Contains information about documents or other Telegram Passport elements shared with the bot by the user.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Type">
            <summary>Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Data">
            <summary>Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying EncryptedCredentials.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Phone_number">
            <summary>Optional. User's verified phone number, available only for “phone_number” type.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Email">
            <summary>Optional. User's verified email address, available only for “email” type.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Files">
            <summary>Optional. Array of encrypted files with documents provided by the user, available for “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Front_side">
            <summary>Optional. Encrypted file with the front side of the document, provided by the user. Available for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Reverse_side">
            <summary>Optional. Encrypted file with the reverse side of the document, provided by the user. Available for “driver_license” and “identity_card”. The file can be decrypted and verified using the accompanying EncryptedCredentials.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Selfie">
            <summary>Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Translation">
            <summary>Optional. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and “temporary_registration” types. Files can be decrypted and verified using the accompanying EncryptedCredentials.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.EncryptedPassportElement.Hash">
            <summary>Base64-encoded element hash for using in PassportElementErrorUnspecified.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportData">
            <summary>Contains information about Telegram Passport data shared with the bot by the user.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportData.Data">
            <summary>Array with information about documents and other Telegram Passport elements that was shared with the bot.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportData.Credentials">
            <summary>Encrypted credentials required to decrypt the data.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementError">
            <summary>This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:<br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorDataField"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorFrontSide"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorReverseSide"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorSelfie"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorFile"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorFiles"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFile"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFiles"/><br/>
            • <see cref="T:TelegramAPI.Telegram_Passport.PassportElementErrorUnspecified"/><br/></summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementError.Source">
            <summary>Error source.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementError.Type">
            <summary>The section of the user's Telegram Passport which has the issue.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementError.Message">
            <summary>Error message.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorDataField">
            <summary>Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorDataField.Source">
            <summary>Error source, must be data.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorDataField.Type">
            <summary>The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorDataField.Field_name">
            <summary>Name of the data field which has the error.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorDataField.Data_hash">
            <summary>Base64-encoded data hash.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorFile">
            <summary>Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFile.Source">
            <summary>Error source, must be file.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFile.Type">
            <summary>The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFile.File_hash">
            <summary>Base64-encoded file hash.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorFiles">
            <summary>Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFiles.Source">
            <summary>Error source, must be files.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFiles.Type">
            <summary>The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFiles.File_hashes">
            <summary>List of base64-encoded file hashes.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorFrontSide">
            <summary>Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFrontSide.Source">
            <summary>Error source, must be front_side.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFrontSide.Type">
            <summary>The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorFrontSide.File_hash">
            <summary>Base64-encoded hash of the file with the front side of the document.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorReverseSide">
            <summary>Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorReverseSide.Source">
            <summary>Error source, must be reverse_side.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorReverseSide.Type">
            <summary>The section of the user's Telegram Passport which has the issue, one of “driver_license”, “identity_card”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorReverseSide.File_hash">
            <summary>Base64-encoded hash of the file with the reverse side of the document.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorSelfie">
            <summary>Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorSelfie.Source">
            <summary>Error source, must be selfie.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorSelfie.Type">
            <summary>The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorSelfie.File_hash">
            <summary>Base64-encoded hash of the file with the selfie.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFile">
            <summary>Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFile.Source">
            <summary>Error source, must be translation_file.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFile.Type">
            <summary>Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFile.File_hash">
            <summary>Base64-encoded file hash.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFiles">
            <summary>Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFiles.Source">
            <summary>Error source, must be translation_files.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFiles.Type">
            <summary>Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorTranslationFiles.File_hashes">
            <summary>List of base64-encoded file hashes.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportElementErrorUnspecified">
            <summary>Represents an issue in an unspecified place. The error is considered resolved when new data is added.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorUnspecified.Source">
            <summary>Error source, must be unspecified.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorUnspecified.Type">
            <summary>Type of element of the user's Telegram Passport which has the issue.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportElementErrorUnspecified.Element_hash">
            <summary>Base64-encoded element hash.</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.PassportFile">
            <summary>This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportFile.File_id">
            <summary>Identifier for this file, which can be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportFile.File_unique_id">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportFile.File_size">
            <summary>File size</summary>
        </member>
        <member name="P:TelegramAPI.Telegram_Passport.PassportFile.File_date">
            <summary>Unix time when the file was uploaded</summary>
        </member>
        <member name="T:TelegramAPI.Telegram_Passport.TelegramPassport">
            <summary>Telegram Passport</summary>
        </member>
        <member name="M:TelegramAPI.Telegram_Passport.TelegramPassport.SetPassportDataErrors(TelegramAPI.BotClient,System.Int32,TelegramAPI.Telegram_Passport.PassportElementError[])">
            <summary>Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.
            <para>Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.</para></summary>
            <param name="T">Bot Client</param>
            <param name="user_id">User identifier</param>
            <param name="errors">An array of <see cref="T:TelegramAPI.Telegram_Passport.PassportElementError"/> describing the errors</param>
        </member>
        <member name="M:TelegramAPI.Telegram_Passport.TelegramPassport.SetPassportDataErrorsAsync(TelegramAPI.BotClient,System.Int32,TelegramAPI.Telegram_Passport.PassportElementError[])">
            <summary>Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.
            <para>Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.</para></summary>
            <param name="T">Bot Client</param>
            <param name="user_id">User identifier</param>
            <param name="errors">An array of <see cref="T:TelegramAPI.Telegram_Passport.PassportElementError"/> describing the errors</param>
        </member>
        <member name="T:TelegramAPI.Updating_messages.EditMessageCaptionArgs">
            <summary>EditMessageCaption method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageCaptionArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageCaptionArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the message to edit.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageCaptionArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageCaptionArgs.Caption">
            <summary>New caption of the message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageCaptionArgs.Parse_mode">
            <summary>Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageCaptionArgs.Reply_markup">
            <summary>A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for an inline keyboard.</summary>
        </member>
        <member name="T:TelegramAPI.Updating_messages.EditMessageMediaArgs">
            <summary>EditMessageMedia method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageMediaArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageMediaArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageMediaArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageMediaArgs.Media">
            <summary>A <see cref="T:TelegramAPI.Available_Types.InputMedia"/> object for a new media content of the message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageMediaArgs.Reply_markup">
            <summary>A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for a new inline keyboard.</summary>
        </member>
        <member name="T:TelegramAPI.Updating_messages.EditMessageReplyMarkup">
            <summary>EditMessageReplyMarkup method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageReplyMarkup.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageReplyMarkup.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the message to edit.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageReplyMarkup.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageReplyMarkup.Reply_markup">
            <summary>A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for an inline keyboard.</summary>
        </member>
        <member name="T:TelegramAPI.Updating_messages.EditMessageTextArgs">
            <summary>EditMessage method arguments.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Chat_id">
            <summary>Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername).</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Message_id">
            <summary>Required if inline_message_id is not specified. Identifier of the message to edit.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Inline_message_id">
            <summary>Required if chat_id and message_id are not specified. Identifier of the inline message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Text">
            <summary>New text of the message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Parse_mode">
            <summary>Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Disable_web_page_preview">
            <summary>Disables link previews for links in this message</summary>
        </member>
        <member name="P:TelegramAPI.Updating_messages.EditMessageTextArgs.Reply_markup">
            <summary>A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for an inline keyboard.</summary>
        </member>
        <member name="T:TelegramAPI.Updating_messages.UpdatingMessages">
            <summary>Updating messages</summary>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.DeleteMessage(TelegramAPI.BotClient,System.Int64,System.UInt32)">
            <summary>Use this method to delete a message, including service messages, with the following limitations: <br/>
            - A message can only be deleted if it was sent less than 48 hours ago.<br/>
            - Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>
            - Bots can delete incoming messages in private chats.<br/>
            - Bots granted can_post_messages permissions can delete outgoing messages in channels.<br/>
            - If the bot is an administrator of a group, it can delete any message there.<br/>
            - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.<br/>
            Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the message to delete.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.DeleteMessage(TelegramAPI.BotClient,System.String,System.UInt32)">
            <summary>Use this method to delete a message, including service messages, with the following limitations: <br/>
            - A message can only be deleted if it was sent less than 48 hours ago.<br/>
            - Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>
            - Bots can delete incoming messages in private chats.<br/>
            - Bots granted can_post_messages permissions can delete outgoing messages in channels.<br/>
            - If the bot is an administrator of a group, it can delete any message there.<br/>
            - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.<br/>
            Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the message to delete.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.DeleteMessageAsync(TelegramAPI.BotClient,System.Int64,System.UInt32)">
            <summary>Use this method to delete a message, including service messages, with the following limitations: <br/>
            - A message can only be deleted if it was sent less than 48 hours ago.<br/>
            - Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>
            - Bots can delete incoming messages in private chats.<br/>
            - Bots granted can_post_messages permissions can delete outgoing messages in channels.<br/>
            - If the bot is an administrator of a group, it can delete any message there.<br/>
            - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.<br/>
            Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the message to delete.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.DeleteMessageAsync(TelegramAPI.BotClient,System.String,System.UInt32)">
            <summary>Use this method to delete a message, including service messages, with the following limitations: <br/>
            - A message can only be deleted if it was sent less than 48 hours ago.<br/>
            - Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>
            - Bots can delete incoming messages in private chats.<br/>
            - Bots granted can_post_messages permissions can delete outgoing messages in channels.<br/>
            - If the bot is an administrator of a group, it can delete any message there.<br/>
            - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.<br/>
            Returns True on success.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the message to delete.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageCaption(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageCaptionArgs)">
            <summary>Use this method to edit captions of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageCaptionAsync(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageCaptionArgs)">
            <summary>Use this method to edit captions of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageMedia(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageMediaArgs)">
            <summary>Use this method to edit animation, audio, document, photo, or video messages. If a message is a part of a message album, then it can be edited only to a photo or a video. Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded. Use previously uploaded file via its file_id or specify a URL. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageMediaAsync(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageMediaArgs)">
            <summary>Use this method to edit animation, audio, document, photo, or video messages. If a message is a part of a message album, then it can be edited only to a photo or a video. Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded. Use previously uploaded file via its file_id or specify a URL. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageReplyMarkup(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageReplyMarkup)">
            <summary>Use this method to edit only the reply markup of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageReplyMarkupAsync(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageReplyMarkup)">
            <summary>Use this method to edit only the reply markup of messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageText(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageTextArgs)">
            <summary>Use this method to edit text and game messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.EditMessageTextAsync(TelegramAPI.BotClient,TelegramAPI.Updating_messages.EditMessageTextArgs)">
            <summary>Use this method to edit text and game messages. On success, if edited message is sent by the bot, the edited Message is returned, otherwise True is returned.</summary>
            <param name="T">BotClient</param>
            <param name="args">Parameters.</param>
            <returns>Message Object.</returns>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPoll(TelegramAPI.BotClient,System.Int64,System.UInt32)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPoll(TelegramAPI.BotClient,System.String,System.UInt32)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPoll(TelegramAPI.BotClient,System.Int64,System.UInt32,TelegramAPI.Available_Types.InlineKeyboardMarkup)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
            <param name="reply_markup">A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for a new message inline keyboard.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPoll(TelegramAPI.BotClient,System.String,System.UInt32,TelegramAPI.Available_Types.InlineKeyboardMarkup)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
            <param name="reply_markup">A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for a new message inline keyboard.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPollAsync(TelegramAPI.BotClient,System.Int64,System.UInt32)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPollAsync(TelegramAPI.BotClient,System.String,System.UInt32)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPollAsync(TelegramAPI.BotClient,System.Int64,System.UInt32,TelegramAPI.Available_Types.InlineKeyboardMarkup)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
            <param name="reply_markup">A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for a new message inline keyboard.</param>
        </member>
        <member name="M:TelegramAPI.Updating_messages.UpdatingMessages.StopPollAsync(TelegramAPI.BotClient,System.String,System.UInt32,TelegramAPI.Available_Types.InlineKeyboardMarkup)">
            <summary>Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.</summary>
            <param name="T">BotClient</param>
            <param name="chat_id">Unique identifier for the target chat or username of the target channel (in the format @channelusername).</param>
            <param name="message_id">Identifier of the original message with the poll</param>
            <param name="reply_markup">A <see cref="T:TelegramAPI.Available_Types.InlineKeyboardMarkup"/> object for a new message inline keyboard.</param>
        </member>
    </members>
</doc>
